{-# OPTIONS --without-K --exact-split --rewriting --overlapping-instances --show-implicit #-}

open import lib.Base
open import lib.Equivalence
open import lib.NType
open import lib.NType2
import lib.types.Nat as N
open import lib.types.Fin

open import Pi+.UFin.BAut
open import Pi+.Misc
open import Pi+.Extra

open import Pi+.Indexed.Syntax as Pi+
open import Pi+.Indexed.SyntaxHat as Pi^
open import Pi+.Indexed.SyntaxHatHelpers as Pi^
open import Pi+.Indexed.SyntaxFull as Pi
open import Pi+.Indexed.Translation
import Pi+.Indexed.Equiv1 as Pi+
import Pi+.Indexed.Equiv1Hat as Pi^
import Pi+.Indexed.Equiv1Norm as Pi^

module Pi+.Indexed.Examples where

private
  variable
    m n o p q r : ‚Ñï

instance
  ltS : {m : ‚Ñï} ‚Üí m N.< (S m)
  ltS = N.ltS
  ltSR : {m n : ‚Ñï} ‚Üí {{m N.< n}} ‚Üí m N.< (S n)
  ltSR {m} {n} {{œï}} = N.ltSR œï

ùüö : Pi.U
ùüö = I + I

ùüú+ : Pi+.U 4
ùüú+ = I + I + I + I + O

ùü†+ : Pi+.U 8
ùü†+ = I + I + I + I + I + I + I + I + O

ùîπ : ‚Ñï ‚Üí Pi.U
ùîπ O = I
ùîπ (S O) = ùüö
ùîπ (S (S n)) = ùüö √ó ùîπ (S n)

controlled : {t : Pi.U} ‚Üí (c : t Pi.‚ü∑‚ÇÅ t) ‚Üí (ùüö Pi.√ó t Pi.‚ü∑‚ÇÅ ùüö Pi.√ó t)
controlled c = dist ‚óé (id‚ü∑‚ÇÅ ‚äï (id‚ü∑‚ÇÅ ‚äó c)) ‚óé factor

controlled^ : {t : Pi.U} ‚Üí (c : t Pi.‚ü∑‚ÇÅ t) ‚Üí _
controlled^ c = eval‚ÇÅ (controlled c)

cif : {t : Pi.U} ‚Üí (c‚ÇÅ c‚ÇÇ : t Pi.‚ü∑‚ÇÅ t) ‚Üí (ùüö Pi.√ó t Pi.‚ü∑‚ÇÅ ùüö Pi.√ó t)
cif c‚ÇÅ c‚ÇÇ = dist ‚óé ((id‚ü∑‚ÇÅ ‚äó c‚ÇÅ) ‚äï (id‚ü∑‚ÇÅ ‚äó c‚ÇÇ)) ‚óé factor

cif^ : {t : Pi.U} ‚Üí (c‚ÇÅ c‚ÇÇ : t Pi.‚ü∑‚ÇÅ t) ‚Üí _
cif^ c‚ÇÅ c‚ÇÇ = eval‚ÇÅ (cif c‚ÇÅ c‚ÇÇ)

not : ùüö Pi.‚ü∑‚ÇÅ ùüö
not = swap‚Çä

not^ : 2 Pi^.‚ü∑‚ÇÅ^ 2
not^ = eval‚ÇÅ not

cnot : ùüö Pi.√ó ùüö Pi.‚ü∑‚ÇÅ ùüö Pi.√ó ùüö
cnot = controlled not

cnot^ : 4 ‚ü∑‚ÇÅ^ 4
cnot^ = eval‚ÇÅ cnot

toffoli‚ÇÉ : ùüö Pi.√ó (ùüö Pi.√ó ùüö) Pi.‚ü∑‚ÇÅ ùüö Pi.√ó (ùüö Pi.√ó ùüö)
toffoli‚ÇÉ = controlled cnot

toffoli‚ÇÉ^ : 8 ‚ü∑‚ÇÅ^ 8
toffoli‚ÇÉ^ = eval‚ÇÅ toffoli‚ÇÉ

toffoli : ‚àÄ n ‚Üí ùîπ n Pi.‚ü∑‚ÇÅ ùîπ n
toffoli O = id‚ü∑‚ÇÅ
toffoli (S O) = swap‚Çä
toffoli (S (S n)) = cif (toffoli (S n)) id‚ü∑‚ÇÅ

toffoli^ : ‚àÄ n ‚Üí _
toffoli^ = eval‚ÇÅ ‚àò toffoli

toffoli+ : ‚àÄ n ‚Üí _
toffoli+ = Pi^.quote^‚ÇÅ ‚àò Pi^.quoteNorm‚ÇÅ idp ‚àò Pi^.evalNorm‚ÇÅ ‚àò toffoli^

toffoli^2-perm : Aut (Fin 4)
toffoli^2-perm = Pi^.evalNorm‚ÇÅ (toffoli^ 2)

swap23 : Aut (Fin 4)
swap23 = equiv f f f-f f-f
  where f : Fin 4 ‚Üí Fin 4
        f (O , œï) = 0
        f (1 , œï) = 1
        f (2 , œï) = 3
        f (3 , œï) = 2
        f (n , N.ltSR (N.ltSR (N.ltSR (N.ltSR ()))))
        f-f : (x : Fin 4) ‚Üí f (f x) == x
        f-f (O , œï) = fin= idp
        f-f (1 , œï) = fin= idp
        f-f (2 , œï) = fin= idp
        f-f (3 , œï) = fin= idp
        f-f (n , N.ltSR (N.ltSR (N.ltSR (N.ltSR ()))))

toffoli^2perm=swap23 : toffoli^2-perm == swap23
toffoli^2perm=swap23 = e= œï
  where œï : (f : Fin 4) ‚Üí ‚Äì> toffoli^2-perm f == ‚Äì> swap23 f
        œï (O , œï) = fin= idp
        œï (1 , œï) = fin= idp
        œï (2 , œï) = fin= idp
        œï (3 , œï) = fin= idp
        œï (n , N.ltSR (N.ltSR (N.ltSR (N.ltSR ()))))

swap23^ : 4 Pi^.‚ü∑‚ÇÅ^ 4
swap23^ = Pi^.quoteNorm‚ÇÅ idp swap23

toffoli^2=swap23^ : toffoli^ 2 Pi^.‚ü∑‚ÇÇ^ swap23^
toffoli^2=swap23^ = (((c‚ÇÇ ‚ä°^ c‚ÇÇ) ‚ä°^ ((c‚ÇÉ ‚ä°^ (c‚ÇÑ ‚ä°^ (c‚ÇÇ ‚ä°^ c‚ÇÇ))) ‚ä°^ (c‚ÇÇ ‚ä°^ c‚ÇÇ))) ‚ñ†^
                    (idl‚óél^ ‚ä°^ (idl‚óél^ ‚ä°^ idl‚óél^)) ‚ñ†^
                    idl‚óél^ ‚ñ†^ idr‚óél^ ‚ñ†^ assoc‚óél^ ‚ñ†^ idr‚óél^ ‚ñ†^ idr‚óél^) ‚ñ†^ idr‚óér^
  where c‚ÇÇ : ‚äï^ ‚äï^ id‚ü∑‚ÇÅ^ ‚ü∑‚ÇÇ^ id‚ü∑‚ÇÅ^
        c‚ÇÇ = (resp‚äï‚ü∑‚ÇÇ ‚äïid‚ü∑‚ÇÅ‚ü∑‚ÇÇ^) ‚ñ†^ ‚äïid‚ü∑‚ÇÅ‚ü∑‚ÇÇ^
        c‚ÇÉ : (‚äï^ ‚äï^ ‚äï^ ‚äï^ id‚ü∑‚ÇÅ^) ‚ü∑‚ÇÇ^ id‚ü∑‚ÇÅ^
        c‚ÇÉ = resp‚äï‚ü∑‚ÇÇ (resp‚äï‚ü∑‚ÇÇ (resp‚äï‚ü∑‚ÇÇ ‚äïid‚ü∑‚ÇÅ‚ü∑‚ÇÇ^)) ‚ñ†^
             resp‚äï‚ü∑‚ÇÇ (resp‚äï‚ü∑‚ÇÇ ‚äïid‚ü∑‚ÇÅ‚ü∑‚ÇÇ^) ‚ñ†^
             resp‚äï‚ü∑‚ÇÇ ‚äïid‚ü∑‚ÇÅ‚ü∑‚ÇÇ^ ‚ñ†^
             ‚äïid‚ü∑‚ÇÅ‚ü∑‚ÇÇ^
        c‚ÇÑ : (swap‚Çä^ ‚óé^ ‚äï^ ‚äï^ id‚ü∑‚ÇÅ^) ‚ü∑‚ÇÇ^ swap‚Çä^
        c‚ÇÑ = (id‚ü∑‚ÇÇ^ ‚ä°^ c‚ÇÇ) ‚ñ†^ idr‚óél^

swap23+ : ùüú+ Pi+.‚ü∑‚ÇÅ ùüú+
swap23+ = Pi+.quote‚ÇÅ idp swap23

toffoli2+ : ùüú+ Pi+.‚ü∑‚ÇÅ ùüú+
toffoli2+ = Pi^.quote^‚ÇÅ swap23^

copy : ‚àÄ n ‚Üí ùüö Pi.√ó ùîπ n Pi.‚ü∑‚ÇÅ ùüö Pi.√ó ùîπ n
copy O = id‚ü∑‚ÇÅ
copy (S O) = swap‚ãÜ ‚óé cnot ‚óé swap‚ãÜ
copy (S (S n)) = assocl‚ãÜ ‚óé (copy (S O) ‚äó id‚ü∑‚ÇÅ) ‚óé assocr‚ãÜ

copy^ : ‚àÄ n ‚Üí _
copy^ = eval‚ÇÅ ‚àò copy

copy+ : ‚àÄ n ‚Üí _
copy+ = Pi^.quote^‚ÇÅ ‚àò Pi^.quoteNorm‚ÇÅ idp ‚àò Pi^.evalNorm‚ÇÅ ‚àò copy^

rearrange : (t‚ÇÅ t‚ÇÇ t‚ÇÉ : Pi.U) ‚Üí t‚ÇÅ Pi.√ó (t‚ÇÇ Pi.√ó t‚ÇÉ) Pi.‚ü∑‚ÇÅ t‚ÇÇ Pi.√ó (t‚ÇÅ Pi.√ó t‚ÇÉ)
rearrange t‚ÇÅ t‚ÇÇ t‚ÇÉ = assocl‚ãÜ ‚óé (swap‚ãÜ ‚äó id‚ü∑‚ÇÅ) ‚óé assocr‚ãÜ

reset : ‚àÄ n ‚Üí ùüö Pi.√ó ùîπ n Pi.‚ü∑‚ÇÅ ùüö Pi.√ó ùîπ n
reset O = id‚ü∑‚ÇÅ
reset (S O) = swap‚ãÜ ‚óé cnot ‚óé swap‚ãÜ
reset (S (S n)) = rearrange ùüö ùüö (ùîπ (S n)) ‚óé cif (reset (S n)) (swap‚Çä ‚äó id‚ü∑‚ÇÅ) ‚óé rearrange ùüö ùüö (ùîπ (S n))

reset^ : ‚àÄ n ‚Üí _
reset^ = eval‚ÇÅ ‚àò reset

reset+ : ‚àÄ n ‚Üí _
reset+ = Pi^.quote^‚ÇÅ ‚àò Pi^.quoteNorm‚ÇÅ idp ‚àò Pi^.evalNorm‚ÇÅ ‚àò reset^

fst2last : ‚àÄ n ‚Üí ùîπ n Pi.‚ü∑‚ÇÅ ùîπ n
fst2last O = id‚ü∑‚ÇÅ
fst2last (S O) = id‚ü∑‚ÇÅ
fst2last (S (S O)) = swap‚ãÜ
fst2last (S (S (S n))) = rearrange ùüö ùüö (ùîπ (S n)) ‚óé (id‚ü∑‚ÇÅ ‚äó fst2last (S (S n)))

incr : ‚àÄ n ‚Üí ùîπ n Pi.‚ü∑‚ÇÅ ùîπ n
incr O = id‚ü∑‚ÇÅ
incr (S O) = swap‚Çä
incr (S (S n)) = (id‚ü∑‚ÇÅ ‚äó incr (S n)) ‚óé fst2last (S (S n)) ‚óé toffoli (S (S n)) ‚óé Pi.!‚ü∑‚ÇÅ (fst2last (S (S n)))

incr^ : ‚àÄ n ‚Üí _
incr^ = eval‚ÇÅ ‚àò incr

incr+ : ‚àÄ n ‚Üí _
incr+ = Pi^.quote^‚ÇÅ ‚àò Pi^.quoteNorm‚ÇÅ idp ‚àò Pi^.evalNorm‚ÇÅ ‚àò incr^

incr+test : Fin 4 ‚Üí Fin 4
incr+test = ‚Äì> (Pi+.eval‚ÇÅ (incr+ 2))

incr+test-0 : incr+test 0 == 3
incr+test-0 = fin= idp

incr+test-1 : incr+test 1 == 0
incr+test-1 = fin= idp

incr+test-2 : incr+test 2 == 1
incr+test-2 = fin= idp

incr+test-3 : incr+test 3 == 2
incr+test-3 = fin= idp
