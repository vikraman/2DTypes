{-# OPTIONS --without-K --exact-split --rewriting --overlapping-instances #-}

open import HoTT hiding (_<_ ; ltS ; ltSR ; _+_ ; _√ó_)
import lib.types.Nat as N
import lib.types.Sigma as S

open import Pi+.UFin.BAut
open import Pi+.Misc
open import Pi+.Extra

open import Pi+.Indexed.Syntax as Pi+
open import Pi+.Indexed.SyntaxHat as Pi^
open import Pi+.Indexed.SyntaxHatHelpers as Pi^
open import Pi+.Indexed.SyntaxFull as Pi
open import Pi+.Indexed.Translation
import Pi+.Indexed.Equiv1 as Pi+
import Pi+.Indexed.Equiv1Hat as Pi^
import Pi+.Indexed.Equiv0Norm as Pi^
import Pi+.Indexed.Equiv1Norm as Pi^
open import Pi+.UFin
open import Pi+.UFin.Monoidal
open import Pi+.Common.FinHelpers
open import Pi+.Lehmer.FinHelpers
open import Pi+.Indexed.Examples.Base using (‚ü¶_‚üß ; ‚ü¶-‚üß-eval‚ÇÄ)

module Pi+.Indexed.Examples.Interp where

open import Pi+.Indexed.Examples.Base

interp : {X Y : Pi.U} (c : X Pi.‚ü∑‚ÇÅ Y) -> ‚ü¶ X ‚üß ‚âÉ ‚ü¶ Y ‚üß
interp unite‚Çäl = Coprod-unit-l _
interp uniti‚Çäl = Coprod-unit-l _ ‚Åª¬π
interp unite‚ãÜl = √ó‚ÇÅ-Unit _
interp uniti‚ãÜl = √ó‚ÇÅ-Unit _ ‚Åª¬π
interp (swap‚Çä {t‚ÇÅ} {t‚ÇÇ}) = ‚äî-comm ‚ü¶ t‚ÇÅ ‚üß ‚ü¶ t‚ÇÇ ‚üß
interp (swap‚ãÜ {t‚ÇÅ} {t‚ÇÇ}) = √ó-comm {A = ‚ü¶ t‚ÇÅ ‚üß} {‚ü¶ t‚ÇÇ ‚üß}
interp assocl‚Çä = ‚äî-assoc ‚ü¶ _ ‚üß ‚ü¶ _ ‚üß ‚ü¶ _ ‚üß ‚Åª¬π
interp assocr‚Çä = ‚äî-assoc _ _ _
interp assocl‚ãÜ = Œ£-assoc ‚Åª¬π
interp assocr‚ãÜ = Œ£-assoc
interp absorbr = √ó‚ÇÅ-Empty _
interp absorbl = √ó‚ÇÅ-Empty _ ‚àòe √ó-comm
interp factorzr = (√ó‚ÇÅ-Empty _ ‚àòe √ó-comm) ‚Åª¬π
interp factorzl = √ó‚ÇÅ-Empty _ ‚Åª¬π
interp dist = √ó-‚äî-distrib _ _ _
interp factor = √ó-‚äî-distrib _ _ _ ‚Åª¬π
interp id‚ü∑‚ÇÅ = ide _
interp (c‚ÇÅ ‚óé c‚ÇÇ) = interp c‚ÇÇ ‚àòe interp c‚ÇÅ
interp (c‚ÇÅ ‚äï c‚ÇÇ) = ‚äî-‚âÉ (interp c‚ÇÅ) (interp c‚ÇÇ)
interp (c‚ÇÅ ‚äó c‚ÇÇ) = √ó-‚âÉ (interp c‚ÇÅ) (interp c‚ÇÇ)

interp+ : {n m : ‚Ñï} {X : Pi+.U n} {Y : Pi+.U m} (c : X Pi+.‚ü∑‚ÇÅ Y) -> ‚ü¶ X ‚üß+ ‚âÉ ‚ü¶ Y ‚üß+
interp+ unite‚Çäl = Coprod-unit-l _
interp+ uniti‚Çäl = Coprod-unit-l _ ‚Åª¬π
interp+ (swap‚Çä {t‚ÇÅ = t‚ÇÅ} {t‚ÇÇ = t‚ÇÇ}) = ‚äî-comm ‚ü¶ t‚ÇÅ ‚üß+ ‚ü¶ t‚ÇÇ ‚üß+
interp+ assocl‚Çä = ‚äî-assoc ‚ü¶ _ ‚üß+ ‚ü¶ _ ‚üß+ ‚ü¶ _ ‚üß+ ‚Åª¬π
interp+ assocr‚Çä = ‚äî-assoc _ _ _
interp+ id‚ü∑‚ÇÅ = ide _
interp+ (c‚ÇÅ ‚óé c‚ÇÇ) = interp+ c‚ÇÇ ‚àòe interp+ c‚ÇÅ
interp+ (c‚ÇÅ ‚äï c‚ÇÇ) = ‚äî-‚âÉ (interp+ c‚ÇÅ) (interp+ c‚ÇÇ)

interp^ : {n m : ‚Ñï} (c : n Pi^.‚ü∑‚ÇÅ^ m) -> ‚ü¶ n ‚üß^ ‚âÉ ‚ü¶ m ‚üß^
interp^ swap‚Çä^ = ‚äî-assoc ‚ä§ ‚ä§ _  ‚àòe ‚äî-‚âÉ (‚äî-comm ‚ä§ ‚ä§) (ide _) ‚àòe ‚äî-assoc ‚ä§ ‚ä§ _ ‚Åª¬π
interp^ id‚ü∑‚ÇÅ^ = ide _
interp^ (c‚ÇÅ ‚óé^ c‚ÇÇ) = interp^ c‚ÇÇ ‚àòe interp^ c‚ÇÅ
interp^ (‚äï^ c) = ‚äî-‚âÉ (ide ‚ä§) (interp^ c)

encode : (X : Pi.U) ‚Üí ‚ü¶ X ‚üß ‚âÉ ‚ü¶ eval‚ÇÄ X ‚üß^
encode O = ide ‚ä•
encode I = ‚äî-comm ‚ä• ‚ä§ ‚àòe Coprod-unit-l _ ‚Åª¬π
encode (X + Y) = {!!}
encode (X √ó Y) = {!!}

-- sound : {X Y : Pi.U} (c : X Pi.‚ü∑‚ÇÅ Y)
--       ‚Üí Pi^.evalNorm‚ÇÅ (eval‚ÇÅ c) ‚àòe ‚ü¶-‚üß-eval‚ÇÄ
--       == transport (Œª n ‚Üí ‚ü¶ Y ‚üß ‚âÉ Fin n)
--                    (! (eval‚ÇÄ-size c)) ‚ü¶-‚üß-eval‚ÇÄ ‚àòe
--                    interp c

-- sound-test1 :
--   let c = swap‚Çä {t‚ÇÅ = I + I + I} {t‚ÇÇ = I + I} in
--   Pi^.evalNorm‚ÇÅ (eval‚ÇÅ c) ‚àòe ‚ü¶-‚üß-eval‚ÇÄ ==  ‚ü¶-‚üß-eval‚ÇÄ ‚àòe interp c
-- sound-test1 =
--   e= Œª { (inl true) ‚Üí idp ; (inl (inr true)) ‚Üí idp ; (inl (inr false)) ‚Üí idp ;
--          (inr (inl x)) ‚Üí idp ; (inr (inr x)) ‚Üí idp }

sound-test2 :
  let c = swap‚ãÜ {t‚ÇÅ = I + I} {t‚ÇÇ = I + I} in
  Pi^.evalNorm‚ÇÅ (eval‚ÇÅ c) ‚àòe ‚ü¶-‚üß-eval‚ÇÄ == ‚ü¶-‚üß-eval‚ÇÄ ‚àòe interp c
sound-test2 =
  e= Œª { (inl x , inl x‚ÇÅ) ‚Üí idp ; (inl x , inr x‚ÇÅ) ‚Üí idp ;
         (inr x , inl x‚ÇÅ) ‚Üí idp ; (inr x , inr x‚ÇÅ) ‚Üí idp }

elems : (t : Pi.U) ‚Üí List ‚ü¶ t ‚üß
elems O = nil
elems I = tt :: nil
elems (t‚ÇÅ + t‚ÇÇ) = map inl (elems t‚ÇÅ) ++ map inr (elems t‚ÇÇ)
elems (t‚ÇÅ √ó t‚ÇÇ) = concat (map (Œª v‚ÇÅ ‚Üí map (Œª v‚ÇÇ ‚Üí (v‚ÇÅ , v‚ÇÇ)) (elems t‚ÇÇ)) (elems t‚ÇÅ))

elems+ : ‚àÄ {n} (t : Pi+.U n) ‚Üí List ‚ü¶ t ‚üß+
elems+ O = nil
elems+ I = tt :: nil
elems+ (t‚ÇÅ + t‚ÇÇ) = map inl (elems+ t‚ÇÅ) ++ map inr (elems+ t‚ÇÇ)

elems^ : ‚àÄ n ‚Üí List ‚ü¶ n ‚üß^
elems^ O = nil
elems^ (S n) = inl tt :: map inr (elems^ n)

test : _
test = elems (ùîπ 3)

interp-elems : ‚àÄ {t‚ÇÅ t‚ÇÇ} (c : t‚ÇÅ Pi.‚ü∑‚ÇÅ t‚ÇÇ) ‚Üí List (‚ü¶ t‚ÇÅ ‚üß S.√ó ‚ü¶ t‚ÇÇ ‚üß)
interp-elems {t‚ÇÅ = t‚ÇÅ} c = map (Œª v ‚Üí (v , ‚Äì> (interp c) v)) (elems t‚ÇÅ)

interp+-elems : ‚àÄ {n m} {t‚ÇÅ : Pi+.U n} {t‚ÇÇ : Pi+.U m} (c : t‚ÇÅ Pi+.‚ü∑‚ÇÅ t‚ÇÇ) ‚Üí List (‚ü¶ t‚ÇÅ ‚üß+ S.√ó ‚ü¶ t‚ÇÇ ‚üß+)
interp+-elems {t‚ÇÅ = t‚ÇÅ} c = map (Œª v ‚Üí (v , ‚Äì> (interp+ c) v)) (elems+ t‚ÇÅ)

interp^-elems : ‚àÄ {n m} (c : n Pi^.‚ü∑‚ÇÅ^ m) ‚Üí List (‚ü¶ n ‚üß^ S.√ó ‚ü¶ m ‚üß^)
interp^-elems {n = n} c = map (Œª v ‚Üí (v , ‚Äì> (interp^ c) v)) (elems^ n)

open import Pi+.Indexed.Examples.Toffoli

test-interp-elems : _
test-interp-elems = interp-elems (toffoli 3)

test-interp-id : _
test-interp-id = interp-elems {t‚ÇÅ = I + (I + I)} id‚ü∑‚ÇÅ

{-
(true , true) ::
(inr true , inr true) :: (inr false , inr false) :: nil
-}

id+ : (I + I + I + O) Pi+.‚ü∑‚ÇÅ (I + I + I + O)
id+ = (Pi^.quote^‚ÇÅ ‚àò Pi^.quoteNorm‚ÇÅ idp ‚àò Pi^.evalNorm‚ÇÅ ‚àò eval‚ÇÅ) (id‚ü∑‚ÇÅ {t = I + (I + I)})

test-interp-id+ : _
test-interp-id+ = interp-elems {t‚ÇÅ = (I + I + I + O)} id‚ü∑‚ÇÅ

{-
(true , true) ::
(inr true , inr true) :: (inr (inr true) , inr (inr true)) :: nil
-}

idx : (I + I + I + I + I + I + O) Pi+.‚ü∑‚ÇÅ (I + I + I + I + I + I + O)
idx = (Pi^.quote^‚ÇÅ ‚àò Pi^.quoteNorm‚ÇÅ idp ‚àò Pi^.evalNorm‚ÇÅ ‚àò eval‚ÇÅ) (id‚ü∑‚ÇÅ {t = ùüö √ó (I + (I + I))})

test-interp-idx : _
test-interp-idx = interp-elems {t‚ÇÅ = ùüö √ó (I + (I + I))} id‚ü∑‚ÇÅ

{-
((true , true) , true , true) ::
((true , inr true) , true , inr true) ::
((true , inr false) , true , inr false) ::
((false , true) , false , true) ::
((false , inr true) , false , inr true) ::
((false , inr false) , false , inr false) :: nil

-------
a1,b1 a1,b2 a1,b3
-------
a2,b1 a2,b2, a2,b3

-}

test-interp-id+x : _
test-interp-id+x = interp-elems {t‚ÇÅ = I + I + I + I + I + I + O} id‚ü∑‚ÇÅ

{-
(true , true) ::
(inr true , inr true) ::
(inr (inr true) , inr (inr true)) ::
(inr (inr (inr true)) , inr (inr (inr true))) ::
(inr (inr (inr (inr true))) , inr (inr (inr (inr true)))) ::
(inr (inr (inr (inr (inr true)))) ,
 inr (inr (inr (inr (inr true)))))
:: nil

------
a1,b1 a1,b2 a1,b3
a2,b1 a2,b2 a2.b3

-}
