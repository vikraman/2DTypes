{-# OPTIONS --without-K --exact-split --rewriting --overlapping-instances #-}

module Pi+.Indexed.Examples.Base where

open import HoTT hiding (_<_ ; ltS ; ltSR ; _+_ ; _√ó_) public
import lib.types.Nat as N
import lib.types.Sigma as S

open import Pi+.UFin.BAut
open import Pi+.Misc
open import Pi+.Extra

open import Pi+.Indexed.Syntax as Pi+
open import Pi+.Indexed.SyntaxHat as Pi^
open import Pi+.Indexed.SyntaxHatHelpers as Pi^
open import Pi+.Indexed.SyntaxFull as Pi
open import Pi+.Indexed.Translation
import Pi+.Indexed.Equiv1 as Pi+
import Pi+.Indexed.Equiv0Hat as Pi^
import Pi+.Indexed.Equiv1Hat as Pi^
import Pi+.Indexed.Equiv0Norm as Pi^
import Pi+.Indexed.Equiv1Norm as Pi^
open import Pi+.UFin
open import Pi+.UFin.Monoidal
open import Pi+.Common.FinHelpers
open import Pi+.Lehmer.FinHelpers

variable
  m n o p q r : ‚Ñï

instance
  ltS : {m : ‚Ñï} ‚Üí m N.< (S m)
  ltS = N.ltS
  ltSR : {m n : ‚Ñï} ‚Üí {{m N.< n}} ‚Üí m N.< (S n)
  ltSR {m} {n} {{œï}} = N.ltSR œï

‚ü¶_‚üß : Pi.U ‚Üí Type‚ÇÄ
‚ü¶ O ‚üß = ‚ä•
‚ü¶ I ‚üß = ‚ä§
‚ü¶ t‚ÇÅ + t‚ÇÇ ‚üß = ‚ü¶ t‚ÇÅ ‚üß ‚äî ‚ü¶ t‚ÇÇ ‚üß
‚ü¶ t‚ÇÅ √ó t‚ÇÇ ‚üß = ‚ü¶ t‚ÇÅ ‚üß S.√ó ‚ü¶ t‚ÇÇ ‚üß

‚ü¶_‚üß+ : {n : ‚Ñï} ‚Üí Pi+.U n ‚Üí Type‚ÇÄ
‚ü¶ O ‚üß+ = ‚ä•
‚ü¶ I ‚üß+ = ‚ä§
‚ü¶ t‚ÇÅ + t‚ÇÇ ‚üß+ = ‚ü¶ t‚ÇÅ ‚üß+ ‚äî ‚ü¶ t‚ÇÇ ‚üß+

‚ü¶-‚üß-eval‚ÇÄ : {X : Pi.U} ‚Üí ‚ü¶ X ‚üß ‚âÉ Fin (eval‚ÇÄ X)
‚ü¶-‚üß-eval‚ÇÄ {O} =
  Fin-equiv-Empty ‚Åª¬π
‚ü¶-‚üß-eval‚ÇÄ {I} =
  contr-equiv-Unit Fin1-level ‚Åª¬π
‚ü¶-‚üß-eval‚ÇÄ {t‚ÇÅ + t‚ÇÇ} =
  Fin-‚äî {eval‚ÇÄ t‚ÇÅ} {eval‚ÇÄ t‚ÇÇ} ‚àòe
  ‚äî-‚âÉ (‚ü¶-‚üß-eval‚ÇÄ {t‚ÇÅ}) (‚ü¶-‚üß-eval‚ÇÄ {t‚ÇÇ})
‚ü¶-‚üß-eval‚ÇÄ {t‚ÇÅ √ó t‚ÇÇ} =
  Fin-√ó {eval‚ÇÄ t‚ÇÅ} {eval‚ÇÄ t‚ÇÇ} ‚àòe
  √ó-‚âÉ (‚ü¶-‚üß-eval‚ÇÄ {t‚ÇÅ}) (‚ü¶-‚üß-eval‚ÇÄ {t‚ÇÇ})

ùüö : Pi.U
ùüö = I + I

ùüú+ : Pi+.U 4
ùüú+ = I + I + I + I + O

ùü†+ : Pi+.U 8
ùü†+ = I + I + I + I + I + I + I + I + O

ùîπ : ‚Ñï ‚Üí Pi.U
ùîπ O = I
ùîπ (S O) = ùüö
ùîπ (S (S n)) = ùüö √ó ùîπ (S n)

test0 : ‚ü¶ ùüö Pi.+ ùüö ‚üß ‚Üí Fin 4
test0 = ‚Äì> ‚ü¶-‚üß-eval‚ÇÄ

_ : (test0 (inr (inr tt)) == 0) S.√ó
    (test0 (inr (inl tt)) == 1) S.√ó
    (test0 (inl (inr tt)) == 2) S.√ó
    (test0 (inl (inl tt)) == 3)
_ = fin= idp , fin= idp , fin= idp , fin= idp

test1 : ‚ü¶ ùîπ 2 ‚üß ‚Üí Fin 4
test1 = ‚Äì> ‚ü¶-‚üß-eval‚ÇÄ

_ : (test1 (inr tt , inr tt) == 0) S.√ó
    (test1 (inr tt , inl tt) == 1) S.√ó
    (test1 (inl tt , inr tt) == 2) S.√ó
    (test1 (inl tt , inl tt) == 3)
_ = fin= idp , fin= idp , fin= idp , fin= idp

interp' : {X : Pi.U} (c : X Pi.‚ü∑‚ÇÅ X) ‚Üí ‚ü¶ X ‚üß ‚âÉ ‚ü¶ X ‚üß
interp' c = ‚ü¶-‚üß-eval‚ÇÄ ‚Åª¬π ‚àòe Pi^.evalNorm‚ÇÅ (eval‚ÇÅ c) ‚àòe ‚ü¶-‚üß-eval‚ÇÄ
