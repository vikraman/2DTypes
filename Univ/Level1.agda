{-# OPTIONS --type-in-type --without-K #-}

module Univ.Level1 where

open import Data.Empty
open import Data.Unit
open import Data.Sum
open import Data.Product
open import Function renaming (_‚àò_ to _‚óã_)
open import Relation.Binary.PropositionalEquality renaming (_‚â°_ to _==_)

open import Univ.Universe
open import Univ.Level0
  using    (ùüò; ùüô; _‚äï_; _‚äó_)
  renaming (U to U‚ÇÄ; Fun to Fun‚ÇÄ;
            _‚àº_ to _‚àº‚ÇÄ_; refl‚àº to refl‚àº‚ÇÄ; sym‚àº to sym‚àº‚ÇÄ; trans‚àº to trans‚àº‚ÇÄ;
            _‚âÉ_ to _‚âÉ‚ÇÄ_)

module MOD0 = Univ.Level0

data _‚ü∑_ : U‚ÇÄ ‚Üí U‚ÇÄ ‚Üí Set where
  id‚ü∑ :    {A : U‚ÇÄ} ‚Üí A ‚ü∑ A
  uniti‚Çär : {A : U‚ÇÄ} ‚Üí A ‚ü∑ (A ‚äï ùüò)
  unite‚Çär : {A : U‚ÇÄ} ‚Üí A ‚äï ùüò ‚ü∑ A
  _‚óé_ :     {A B C : U‚ÇÄ} ‚Üí (A ‚ü∑ B) ‚Üí (B ‚ü∑ C) ‚Üí (A ‚ü∑ C)
  -- elided

! : {A B : U‚ÇÄ} ‚Üí (A ‚ü∑ B) ‚Üí (B ‚ü∑ A)
! unite‚Çär = uniti‚Çär
! uniti‚Çär = unite‚Çär
! id‚ü∑ = id‚ü∑
! (c‚ÇÅ ‚óé c‚ÇÇ) = ! c‚ÇÇ ‚óé ! c‚ÇÅ

El : {A B : U‚ÇÄ} ‚Üí (A ‚ü∑ B) ‚Üí Set
El {A} {B} _ = A ‚âÉ‚ÇÄ B

sound : {A B : U‚ÇÄ} ‚Üí (c : A ‚ü∑ B) ‚Üí El c
sound id‚ü∑ = MOD0.id‚âÉ
sound uniti‚Çär = MOD0.sym‚âÉ MOD0.A‚äé‚ä•‚âÉA
sound unite‚Çär = MOD0.A‚äé‚ä•‚âÉA
sound (c‚ÇÅ ‚óé c‚ÇÇ) = MOD0.trans‚âÉ (sound c‚ÇÅ) (sound c‚ÇÇ)

Fun : {A B : U‚ÇÄ} ‚Üí (c‚ÇÅ c‚ÇÇ : A ‚ü∑ B) ‚Üí Set
Fun {A} {B} _ _ =
  Œ£[ F ‚àà (Fun‚ÇÄ A B ‚Üí Fun‚ÇÄ A B) ]
  Œ£[ G ‚àà (Fun‚ÇÄ B A ‚Üí Fun‚ÇÄ B A) ]
  ((f : Fun‚ÇÄ A B) ‚Üí (F f ‚àº‚ÇÄ f)) √ó
  ((g : Fun‚ÇÄ B A) ‚Üí (G g ‚àº‚ÇÄ g))

app : {A B : U‚ÇÄ} {c‚ÇÅ c‚ÇÇ : A ‚ü∑ B} ‚Üí Fun c‚ÇÅ c‚ÇÇ ‚Üí El c‚ÇÅ ‚Üí El c‚ÇÇ
app (F , G , Œ≥ , Œ¥) (f , MOD0.mkisequiv g Œ± Œ≤) =
  F f ,
  MOD0.mkisequiv
    (G g)
    (trans‚àº‚ÇÄ (MOD0.‚àº‚óã (Œ¥ g) (Œ≥ f)) Œ±)
    (trans‚àº‚ÇÄ (MOD0.‚àº‚óã (Œ≥ f) (Œ¥ g)) Œ≤)

idF : {A B : U‚ÇÄ} {c : A ‚ü∑ B} ‚Üí Fun c c
idF = (id , id , refl‚àº‚ÇÄ , refl‚àº‚ÇÄ)

compose : {A B : U‚ÇÄ} {c‚ÇÅ c‚ÇÇ c‚ÇÉ : A ‚ü∑ B} ‚Üí Fun c‚ÇÅ c‚ÇÇ ‚Üí Fun c‚ÇÇ c‚ÇÉ ‚Üí Fun c‚ÇÅ c‚ÇÉ
compose (F‚ÇÅ , G‚ÇÅ , Œ≥‚ÇÅ , Œ¥‚ÇÅ) (F‚ÇÇ , G‚ÇÇ , Œ≥‚ÇÇ , Œ¥‚ÇÇ) =
  F‚ÇÇ ‚óã F‚ÇÅ ,
  G‚ÇÇ ‚óã G‚ÇÅ ,
  (Œª f ‚Üí trans‚àº‚ÇÄ (Œ≥‚ÇÇ (F‚ÇÅ f)) (Œ≥‚ÇÅ f)) ,
  (Œª g ‚Üí trans‚àº‚ÇÄ (Œ¥‚ÇÇ (G‚ÇÅ g)) (Œ¥‚ÇÅ g))

record _‚â°_ {A B : U‚ÇÄ} {c : A ‚ü∑ B} (eq‚ÇÅ eq‚ÇÇ : El c) : Set where
  open MOD0.isequiv (proj‚ÇÇ eq‚ÇÅ) renaming (g to g‚ÇÅ)
  open MOD0.isequiv (proj‚ÇÇ eq‚ÇÇ) renaming (g to g‚ÇÇ)
  field
    f‚â° : proj‚ÇÅ eq‚ÇÅ ‚àº‚ÇÄ proj‚ÇÅ eq‚ÇÇ
    g‚â° : g‚ÇÅ ‚àº‚ÇÄ g‚ÇÇ

refl‚â° : {A B : U‚ÇÄ} {c : A ‚ü∑ B} (eq : El c) ‚Üí _‚â°_ {c = c} eq eq
refl‚â° (f , MOD0.mkisequiv g Œ± Œ≤) =
  record {
    f‚â° = MOD0.refl‚àº f
  ; g‚â° = MOD0.refl‚àº g
  }

trans‚â° : {A B : U‚ÇÄ} {c : A ‚ü∑ B} {eq‚ÇÅ eq‚ÇÇ eq‚ÇÉ : El c} ‚Üí
         (_‚â°_ {c = c} eq‚ÇÅ eq‚ÇÇ) ‚Üí (_‚â°_ {c = c} eq‚ÇÇ eq‚ÇÉ) ‚Üí
         (_‚â°_ {c = c} eq‚ÇÅ eq‚ÇÉ)
trans‚â° (record { f‚â° = f‚â°‚ÇÅ ; g‚â° = g‚â°‚ÇÅ }) (record { f‚â° = f‚â°‚ÇÇ ; g‚â° = g‚â°‚ÇÇ }) =
  record {
    f‚â° = MOD0.trans‚àº f‚â°‚ÇÅ f‚â°‚ÇÇ
  ; g‚â° = MOD0.trans‚àº g‚â°‚ÇÅ g‚â°‚ÇÇ
  }

cong‚â° : {A B : U‚ÇÄ} {c‚ÇÅ c‚ÇÇ : A ‚ü∑ B} {eq‚ÇÅ eq‚ÇÇ : El c‚ÇÅ} ‚Üí
      (f : Fun c‚ÇÅ c‚ÇÇ) ‚Üí _‚â°_ {c = c‚ÇÅ} eq‚ÇÅ eq‚ÇÇ ‚Üí
      _‚â°_ {c = c‚ÇÇ} (app {c‚ÇÅ = c‚ÇÅ} {c‚ÇÇ = c‚ÇÇ} f eq‚ÇÅ) (app {c‚ÇÅ = c‚ÇÅ} {c‚ÇÇ = c‚ÇÇ} f eq‚ÇÇ)
cong‚â° {eq‚ÇÅ = f‚ÇÅ , MOD0.mkisequiv g‚ÇÅ Œ±‚ÇÅ Œ≤‚ÇÅ}
      {eq‚ÇÇ = f‚ÇÇ , MOD0.mkisequiv g‚ÇÇ Œ±‚ÇÇ Œ≤‚ÇÇ}
      (F , G , Œ≥ , Œ¥)
      (record { f‚â° = f‚â° ; g‚â° = g‚â° }) =
  record {
     f‚â° = trans‚àº‚ÇÄ (Œ≥ f‚ÇÅ) (trans‚àº‚ÇÄ f‚â° (sym‚àº‚ÇÄ (Œ≥ f‚ÇÇ)))
   ; g‚â° = trans‚àº‚ÇÄ (Œ¥ g‚ÇÅ) (trans‚àº‚ÇÄ g‚â° (sym‚àº‚ÇÄ (Œ¥ g‚ÇÇ)))
   }

_‚àº_ : {A B : U‚ÇÄ} {c‚ÇÅ c‚ÇÇ : A ‚ü∑ B} ‚Üí (f g : Fun c‚ÇÅ c‚ÇÇ) ‚Üí Set
_‚àº_ {c‚ÇÅ = c‚ÇÅ} {c‚ÇÇ = c‚ÇÇ} f g =
   (eq : El c‚ÇÅ) ‚Üí
   _‚â°_ {c = c‚ÇÇ} (app {c‚ÇÅ = c‚ÇÅ} {c‚ÇÇ = c‚ÇÇ} f eq) (app {c‚ÇÅ = c‚ÇÅ} {c‚ÇÇ = c‚ÇÇ} g eq)

refl‚àº : {A B : U‚ÇÄ} {c : A ‚ü∑ B} ‚Üí (f : Fun c c) ‚Üí
        _‚àº_ {c‚ÇÅ = c} {c‚ÇÇ = c} f f
refl‚àº {c = c} f eq = refl‚â° (app {c‚ÇÅ = c} {c‚ÇÇ = c} f eq)

assoc-‚àò : {A B : U‚ÇÄ} {c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ : A ‚ü∑ B} {f : Fun c‚ÇÅ c‚ÇÇ} {g : Fun c‚ÇÇ c‚ÇÉ} {h : Fun c‚ÇÉ c‚ÇÑ} ‚Üí
  _‚àº_ {c‚ÇÅ = c‚ÇÅ} {c‚ÇÑ} (compose {c‚ÇÅ = c‚ÇÅ} {c‚ÇÇ} {c‚ÇÑ} f (compose {c‚ÇÅ = c‚ÇÇ} {c‚ÇÉ} {c‚ÇÑ} g h))
                     (compose {c‚ÇÅ = c‚ÇÅ} {c‚ÇÉ} {c‚ÇÑ} (compose {c‚ÇÅ = c‚ÇÅ} {c‚ÇÇ} {c‚ÇÉ} f g) h)
assoc-‚àò = {!!}

record isequiv {A B : U‚ÇÄ} {c‚ÇÅ c‚ÇÇ : A ‚ü∑ B}
       (f : Fun c‚ÇÅ c‚ÇÇ) : Set where
  constructor mkisequiv
  field
    g : Fun c‚ÇÇ c‚ÇÅ
    Œ± : _‚àº_ {c‚ÇÅ = c‚ÇÇ} {c‚ÇÇ = c‚ÇÇ}
        (compose {c‚ÇÅ = c‚ÇÇ} {c‚ÇÇ = c‚ÇÅ} {c‚ÇÉ = c‚ÇÇ} g f)
        (idF {c = c‚ÇÇ})
    Œ≤ : _‚àº_ {c‚ÇÅ = c‚ÇÅ} {c‚ÇÇ = c‚ÇÅ}
        (compose {c‚ÇÅ = c‚ÇÅ} {c‚ÇÇ = c‚ÇÇ} {c‚ÇÉ = c‚ÇÅ} f g)
        (idF {c = c‚ÇÅ})

_‚âÉ_ : {A B : U‚ÇÄ} ‚Üí (c‚ÇÅ c‚ÇÇ : A ‚ü∑ B) ‚Üí Set
_‚âÉ_ {A} {B} c‚ÇÅ c‚ÇÇ = Œ£ (Fun c‚ÇÅ c‚ÇÇ) (isequiv {c‚ÇÅ = c‚ÇÅ} {c‚ÇÇ = c‚ÇÇ})

id‚âÉ : {A B : U‚ÇÄ} ‚Üí (c : A ‚ü∑ B) ‚Üí c ‚âÉ c
id‚âÉ c = idF {c = c},
        mkisequiv
          (idF {c = c})
          (refl‚àº {c = c} (idF {c = c}))
          (refl‚àº {c = c} (idF {c = c}))

trans‚âÉ : {A B : U‚ÇÄ} {c‚ÇÅ c‚ÇÇ c‚ÇÉ : A ‚ü∑ B} ‚Üí (c‚ÇÅ ‚âÉ c‚ÇÇ) ‚Üí (c‚ÇÇ ‚âÉ c‚ÇÉ) ‚Üí (c‚ÇÅ ‚âÉ c‚ÇÉ)
trans‚âÉ {c‚ÇÅ = c‚ÇÅ} {c‚ÇÇ = c‚ÇÇ} {c‚ÇÉ = c‚ÇÉ}
   (f , mkisequiv f‚Åª Œ±‚ÇÅ Œ≤‚ÇÅ) (g , mkisequiv g‚Åª Œ±‚ÇÇ Œ≤‚ÇÇ) =
   compose {c‚ÇÅ = c‚ÇÅ} {c‚ÇÇ = c‚ÇÇ} {c‚ÇÉ = c‚ÇÉ} f g ,
   mkisequiv (compose {c‚ÇÅ = c‚ÇÉ} {c‚ÇÇ = c‚ÇÇ} {c‚ÇÉ = c‚ÇÅ} g‚Åª f‚Åª)
   (Œª eq‚ÇÅ ‚Üí {!!})
   (Œª eq‚ÇÇ ‚Üí {!!})

Univ : (A B : U‚ÇÄ) ‚Üí Universe
Univ A B = record
              { U = A ‚ü∑ B
              ; El = Œª _ ‚Üí A ‚âÉ‚ÇÄ B
              ; Fun = Fun
              ; _‚àº_ = Œª { {c‚ÇÅ} {c‚ÇÇ} ‚Üí _‚àº_ {c‚ÇÅ = c‚ÇÅ} {c‚ÇÇ = c‚ÇÇ}}
              ; _‚â°_ = Œª { {c} ‚Üí _‚â°_ {c = c}}
              ; _‚âÉ_ = _‚âÉ_
              ; SynCat = record
                           { id = Œª {A} ‚Üí idF {c = A}
                           ; _‚àò_ = Œª {p} {q} {r} ‚Üí compose {c‚ÇÅ = r} {c‚ÇÇ = q} {c‚ÇÉ = p}
                           ; assoc = {!!}
                           ; identityÀ° = {!!}
                           ; identity ≥ = {!!}
                           ; equiv = {!!}
                           ; ‚àò-resp-‚â° = {!!}
                           }
              ; ElFunc = {!!}
              }
