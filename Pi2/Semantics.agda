{-# OPTIONS --without-K --allow-unsolved-metas #-}

module Pi2.Semantics where

open import UnivalentTypeTheory
open import TwoUniverse as M
open import Pi2.Syntax as S

------------------------------------------------------------------------------
-- Soundness: mapping syntax to the model

‚ü¶_‚üß : U ‚Üí U[ùüö]
‚ü¶ `ùüö ‚üß = M.`ùüö

‚ü¶_‚üß‚ÇÅ : {A B : U} ‚Üí A ‚ü∑‚ÇÅ B ‚Üí ‚ü¶ A ‚üß == ‚ü¶ B ‚üß
‚ü¶_‚üß‚ÇÅ `id = M.`id
‚ü¶_‚üß‚ÇÅ `not = M.`not
‚ü¶_‚üß‚ÇÅ (!‚ÇÅ p) = ! ‚ü¶ p ‚üß‚ÇÅ
‚ü¶_‚üß‚ÇÅ (p ‚óæ‚ÇÅ q) = ‚ü¶ p ‚üß‚ÇÅ ‚óæ ‚ü¶ q ‚üß‚ÇÅ

‚ü¶_‚üß‚ÇÇ : {A B : U} {p q : A ‚ü∑‚ÇÅ B} ‚Üí (u : p ‚ü∑‚ÇÇ q) ‚Üí ‚ü¶ p ‚üß‚ÇÅ == ‚ü¶ q ‚üß‚ÇÅ
‚ü¶_‚üß‚ÇÇ {p = p} `id‚ÇÇ = refl ‚ü¶ p ‚üß‚ÇÅ
‚ü¶_‚üß‚ÇÇ (`idl p) = ‚óæunitl ‚ü¶ p ‚üß‚ÇÅ
‚ü¶_‚üß‚ÇÇ (`idr p) = ‚óæunitr ‚ü¶ p ‚üß‚ÇÅ
‚ü¶_‚üß‚ÇÇ (`!l p) = ‚óæinvr ‚ü¶ p ‚üß‚ÇÅ
‚ü¶_‚üß‚ÇÇ (`!r p) = ‚óæinvl ‚ü¶ p ‚üß‚ÇÅ
‚ü¶_‚üß‚ÇÇ `!id = refl M.`id
‚ü¶_‚üß‚ÇÇ `!not = M.OneDimensionalTerms.!not=not
‚ü¶_‚üß‚ÇÇ (`!‚óæ {p = p} {q}) = !‚óæ ‚ü¶ p ‚üß‚ÇÅ ‚ü¶ q ‚üß‚ÇÅ
‚ü¶_‚üß‚ÇÇ `!! = !! _
‚ü¶_‚üß‚ÇÇ (`assoc p q r) = ‚óæassoc _ _ _
‚ü¶_‚üß‚ÇÇ (!‚ÇÇ u) = ! ‚ü¶ u ‚üß‚ÇÇ
‚ü¶_‚üß‚ÇÇ (u ‚óæ‚ÇÇ u‚ÇÅ) = ‚ü¶ u ‚üß‚ÇÇ ‚óæ ‚ü¶ u‚ÇÅ ‚üß‚ÇÇ
‚ü¶_‚üß‚ÇÇ (u ‚ñ°‚ÇÇ v ) = ‚ü¶ u ‚üß‚ÇÇ [2,0,2] ‚ü¶ v ‚üß‚ÇÇ
‚ü¶_‚üß‚ÇÇ (`! Œ±) = ap ! ‚ü¶ Œ± ‚üß‚ÇÇ

-- One approach to completeness:
module Altenkich where
  ------------------------------------------------------------------------------
  -- Completeness: mapping the model to syntax

  quote‚ÇÄ : U[ùüö] ‚Üí U
  quote‚ÇÄ _ = U.`ùüö

  quote‚ÇÅ : {A B : U} ‚Üí ‚ü¶ A ‚üß == ‚ü¶ B ‚üß ‚Üí A ‚ü∑‚ÇÅ B
  quote‚ÇÅ {U.`ùüö} {U.`ùüö} eq with M.OneDimensionalTerms.all-1-paths eq
  ... | i‚ÇÅ _ = _‚ü∑‚ÇÅ_.`id
  ... | i‚ÇÇ _ = _‚ü∑‚ÇÅ_.`not

  quote‚ÇÇ : {A B : U} {p q : A ‚ü∑‚ÇÅ B} ‚Üí ‚ü¶ p ‚üß‚ÇÅ == ‚ü¶ q ‚üß‚ÇÅ ‚Üí (p ‚ü∑‚ÇÇ q)
  quote‚ÇÇ eq‚ÇÇ = {!!}

  ------------------------------------------------------------------------------
  -- Normalization by evaluation a la Altenkirch

  canonical‚ÇÅ : {A B : U} ‚Üí (p : A ‚ü∑‚ÇÅ B) ‚Üí (A ‚ü∑‚ÇÅ B)
  canonical‚ÇÅ p = quote‚ÇÅ ‚ü¶ p ‚üß‚ÇÅ

  inversion‚ÇÅ : {A B : U} ‚Üí (p : A ‚ü∑‚ÇÅ B) ‚Üí canonical‚ÇÅ p ‚ü∑‚ÇÇ p
  inversion‚ÇÅ {U.`ùüö} {.U.`ùüö} _‚ü∑‚ÇÅ_.`id = `id‚ÇÇ
  inversion‚ÇÅ {U.`ùüö} {.U.`ùüö} _‚ü∑‚ÇÅ_.`not = {!!} -- lack of evaluation blocks
  inversion‚ÇÅ (!‚ÇÅ u) = {!!}
  inversion‚ÇÅ (u ‚óæ‚ÇÅ u‚ÇÅ) = {!!}

  completeness‚ÇÅ : {A B : U} {p q : A ‚ü∑‚ÇÅ B} ‚Üí ‚ü¶ p ‚üß‚ÇÅ == ‚ü¶ q ‚üß‚ÇÅ ‚Üí p ‚ü∑‚ÇÇ q
  completeness‚ÇÅ {p = p} {q = q} u = {!!}
  {--
  p <=> canonical p <=> canonical q <=> q
  --}

------------------------------------------------------------------------------

-- Another approach
module Direct where
  open _‚ü∑‚ÇÅ_

  data Which : Set‚ÇÄ where ID NOT : Which

  refine : (w : Which) ‚Üí U.`ùüö ‚ü∑‚ÇÅ U.`ùüö
  refine ID = _‚ü∑‚ÇÅ_.`id
  refine NOT = _‚ü∑‚ÇÅ_.`not

  canonical‚ÇÅ : (p : U.`ùüö ‚ü∑‚ÇÅ U.`ùüö) ‚Üí Œ£ Which (Œª c ‚Üí p ‚ü∑‚ÇÇ (refine c))
  canonical‚ÇÅ `id = ID , `id‚ÇÇ
  canonical‚ÇÅ `not = NOT , `id‚ÇÇ
  canonical‚ÇÅ (!‚ÇÅ p) with canonical‚ÇÅ p
  ... | ID  , Œ± = ID  , (`! Œ± ‚óæ‚ÇÇ `!id)
  ... | NOT , Œ± = NOT , (`! Œ± ‚óæ‚ÇÇ `!not)
  canonical‚ÇÅ (_‚óæ‚ÇÅ_ {_} {U.`ùüö} p‚ÇÄ p‚ÇÅ) with canonical‚ÇÅ p‚ÇÄ | canonical‚ÇÅ p‚ÇÅ
  ... | ID  , Œ± | ID  , Œ≤ = ID , ((Œ± ‚ñ°‚ÇÇ Œ≤) ‚óæ‚ÇÇ `idl _‚ü∑‚ÇÅ_.`id)
  ... | ID  , Œ± | NOT , Œ≤ = NOT , ((Œ± ‚ñ°‚ÇÇ Œ≤) ‚óæ‚ÇÇ `idl _‚ü∑‚ÇÅ_.`not)
  ... | NOT , Œ± | ID  , Œ≤ = NOT , ((Œ± ‚ñ°‚ÇÇ Œ≤) ‚óæ‚ÇÇ `idr _‚ü∑‚ÇÅ_.`not)
  ... | NOT , Œ± | NOT , Œ≤ = ID , ((Œ± ‚ñ°‚ÇÇ Œ≤) ‚óæ‚ÇÇ {!`!!!})
