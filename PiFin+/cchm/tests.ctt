module tests where

import prelude
import equiv
import syntax
import semantics

PlusUnitL (X : U) : Path U (Plus Zero X) X =
  isoPath (Plus Zero X) X f g fg gf
  where
    f : Plus Zero X -> X = split
      inl z -> zeroElim X z
      inr x -> x
    g (x : X) : Plus Zero X = inr x
    fg (x : X) : Path X (f (g x)) x = <_> x
    gf : (y : Plus Zero X) -> Path (Plus Zero X) (g (f y)) y = split
      inl z -> zeroElim (Path (Plus Zero X) (g (f (inl z))) (inl z)) z
      inr x -> <_> inr x

PlusUnitR (X : U) : Path U (Plus X Zero) X =
  isoPath (Plus X Zero) X f g fg gf
  where
    f : Plus X Zero -> X = split
      inl x -> x
      inr z -> zeroElim X z
    g (x : X) : Plus X Zero = inl x
    fg (x : X) : Path X (f (g x)) x = <_> x
    gf : (y : Plus X Zero) -> Path (Plus X Zero) (g (f y)) y = split
      inl x -> <_> inl x
      inr z -> zeroElim (Path (Plus X Zero) (g (f (inr z))) (inr z)) z

PlusAssoc (X Y Z : U) : Path U (Plus X (Plus Y Z)) (Plus (Plus X Y) Z) =
  isoPath (Plus X (Plus Y Z)) (Plus (Plus X Y) Z) f g fg gf
  where
    f2 : Plus Y Z -> Plus (Plus X Y) Z = split
      inl y -> inl (inr y)
      inr z -> inr z
    f : Plus X (Plus Y Z) -> Plus (Plus X Y) Z = split
      inl x -> inl (inl x)
      inr w -> f2 w
    g2 : Plus X Y -> Plus X (Plus Y Z) = split
      inl x -> inl x
      inr y -> inr (inl y)
    g : Plus (Plus X Y) Z -> Plus X (Plus Y Z) = split
      inl w -> g2 w
      inr z -> inr (inr z)
    fg2 : (w : Plus X Y) -> Path (Plus (Plus X Y) Z) (f (g (inl w))) (inl w) = split
      inl x -> <_> inl (inl x)
      inr y -> <_> inl (inr y)
    fg : (a : Plus (Plus X Y) Z) -> Path (Plus (Plus X Y) Z) (f (g a)) a = split
      inl w -> fg2 w
      inr z -> <_> inr z
    gf2 : (w : Plus Y Z) -> Path (Plus X (Plus Y Z)) (g (f (inr w))) (inr w) = split
      inl y -> <_> inr (inl y)
      inr z -> <_> inr (inr z)
    gf : (a : Plus X (Plus Y Z)) -> Path (Plus X (Plus Y Z)) (g (f a)) a = split
      inl x -> <_> inl x
      inr w -> gf2 w

PlusComm (X Y : U) : Path U (Plus X Y) (Plus Y X) =
  isoPath (Plus X Y) (Plus Y X) f g fg gf
  where
    f : Plus X Y -> Plus Y X = split
      inl x -> inr x
      inr y -> inl y
    g : Plus Y X -> Plus X Y = split
      inl y -> inr y
      inr x -> inl x
    fg : (z : Plus Y X) -> Path (Plus Y X) (f (g z)) z = split
      inl y -> <_> inl y
      inr x -> <_> inr x
    gf : (z : Plus X Y) -> Path (Plus X Y) (g (f z)) z = split
      inl x -> <_> inl x
      inr y -> <_> inr y

ElPlus (m : Nat) : (n : Nat) -> Path U (El (add m n)) (Plus (El m) (El n)) = split
  O -> <i> PlusUnitR (El m) @ -i
  S n -> trans U (Plus One (El (add m n))) (Plus One (Plus (El m) (El n))) (Plus (El m) (Plus One (El n)))
               (<i> Plus One (ElPlus m n @ i))
               (trans U (Plus One (Plus (El m) (El n))) (Plus (Plus One (El m)) (El n)) (Plus (El m) (Plus One (El n)))
                      (PlusAssoc One (El m) (El n))
                      (trans U (Plus (Plus One (El m)) (El n)) (Plus (Plus (El m) One) (El n)) (Plus (El m) (Plus One (El n)))
                             (<i> Plus (PlusComm One (El m) @ i) (El n))
                             (<i> PlusAssoc (El m) One (El n) @ -i)))

idEl (m n : Nat) (p : Path Nat m n) : Path U (El m) (El n) = <i> El (p @ i)

-- this won't swap
testIdComml : El (S (S O)) = comp (idEl (S (S O)) (S (S O)) (addComm (S O) (S O))) (inl tt) []
testIdCommr : El (S (S O)) = comp (idEl (S (S O)) (S (S O)) (addComm (S O) (S O))) (inr (inl tt)) []

swapEl (m n : Nat) : Path U (El (add m n)) (El (add n m)) =
  trans U (El (add m n)) (Plus (El m) (El n)) (El (add n m))
        (ElPlus m n)
        (trans U (Plus (El m) (El n)) (Plus (El n) (El m)) (El (add n m))
               (PlusComm (El m) (El n))
               (<i> ElPlus n m @ -i))

swap2El (m n : Nat) : Path U (El (add m n)) (El (add m n)) =
  <i> comp (<_> U) (swapEl m n @ i)
           [ (i = 0) -> <j> El (add m n), (i = 1) -> swapEl n m ]

assocEl (m n o : Nat) : Path U (El (add m (add n o))) (El (add (add m n) o)) =
  trans U (El (add m (add n o))) (Plus (El m) (El (add n o))) (El (add (add m n) o))
        (ElPlus m (add n o))
        (trans U (Plus (El m) (El (add n o))) (Plus (El m) (Plus (El n) (El o))) (El (add (add m n) o))
               (<i> (Plus (El m) (ElPlus n o @ i)))
               (trans U (Plus (El m) (Plus (El n) (El o))) (Plus (Plus (El m) (El n)) (El o)) (El (add (add m n) o))
                      (PlusAssoc (El m) (El n) (El o))
                      (trans U (Plus (Plus (El m) (El n)) (El o)) (Plus (El (add m n)) (El o)) (El (add (add m n) o))
                             (<i> (Plus (ElPlus m n @ -i) (El o)))
                             (<i> ElPlus (add m n) o @ -i))))

zero : Nat = O
one : Nat = S O
two : Nat = S one
three : Nat = S two
four : Nat = S three
five : Nat = S four
six : Nat = S five

inEl : (m n : Nat) -> El (S n) = split
  O -> \(n : Nat) -> inl tt
  S m -> split@((n : Nat) -> El (S n)) with
    O -> inl tt
    S n -> inr (inEl m n)

-- 2 = 1 + 1
testSwapL2 : El two = comp (swapEl one one) (inEl zero one) []
testSwapRL2 : El two = comp (swapEl one one) (inr (inl tt)) []

-- 3 = 2 + 1
testSwapL3 : El three = comp (swapEl two one) (inl tt) []
testSwapRL3 : El three = comp (swapEl two one) (inr (inl tt)) []
testSwapRRL3 : El three = comp (swapEl two one) (inr (inr (inl tt))) []

-- 4 = 3 + 1
testSwapL4 : El four = comp (swapEl three one) (inl tt) []
testSwapRL4 : El four = comp (swapEl three one) (inr (inl tt)) []
testSwapRRL4 : El four = comp (swapEl three one) (inr (inr (inl tt))) []
testSwapRRRL4 : El four = comp (swapEl three one) (inr (inr (inr (inl tt)))) []

-- 2 = 1 + 1
testSwap2L2 : El two = comp (swap2El one one) (inl tt) []
testSwap2RL2 : El two = comp (swap2El one one) (inr (inl tt)) []

-- 3 = 2 + 1
testSwap2L3 : El three = comp (swap2El two one) (inl tt) []
testSwap2RL3 : El three = comp (swap2El two one) (inr (inl tt)) []
testSwap2RRL3 : El three = comp (swap2El two one) (inr (inr (inl tt))) []

-- 4 = 3 + 1
testSwap2L4 : El four = comp (swap2El three one) (inl tt) []
testSwap2RL4 : El four = comp (swap2El three one) (inr (inl tt)) []
testSwap2RRL4 : El four = comp (swap2El three one) (inr (inr (inl tt))) []
testSwap2RRRL4 : El four = comp (swap2El three one) (inr (inr (inr (inl tt)))) []

-- 2 = 1 + 1 + 0
testAssocL2 : El two = comp (assocEl one one zero) (inl tt) []
testAssocRL2 : El two = comp (assocEl one one zero) (inr (inl tt)) []

-- 3 = 1 + 1 + 1
testAssocL3 : El three = comp (assocEl one one one) (inl tt) []
testAssocRL3 : El three = comp (assocEl one one one) (inr (inl tt)) []
testAssocRRL3 : El three = comp (assocEl one one one) (inr (inr (inl tt))) []

-- 4 = 2 + 1 + 1
testAssocL4 : El four = comp (assocEl two one one) (inl tt) []
testAssocRL4 : El four = comp (assocEl two one one) (inr (inl tt)) []
testAssocRRL4 : El four = comp (assocEl two one one) (inr (inr (inl tt))) []
testAssocRRRL4 : El four = comp (assocEl two one one) (inr (inr (inr (inl tt)))) []

-- 6 = 3 + 2 + 1
testAssocL6 : El six = comp (assocEl three two one) (inl tt) []
testAssocRL6 : El six = comp (assocEl three two one) (inr (inl tt)) []
testAssocRRL6 : El six = comp (assocEl three two one) (inr (inr (inl tt))) []
testAssocRRRL6 : El six = comp (assocEl three two one) (inr (inr (inr (inl tt)))) []
testAssocRRRRL6 : El six = comp (assocEl three two one) (inr (inr (inr (inr (inl tt))))) []
testAssocRRRRRL6 : El six = comp (assocEl three two one) (inr (inr (inr (inr (inr (inl tt)))))) []
