module 2D.Frac where

open import Data.Sum
open import Data.Product
open import Data.Empty
open import Data.Unit

infix 60 _โ_
infix 50 _โ_
infix 40 _โ_
infix  30 _โท_

mutual
  data U : Set where
    ๐ : U
    ๐ : U
    _โ_ : U โ U โ U
    _โ_ : U โ U โ U
    _โ_ : (ฯ : U) โ (ฯ โท ฯ) โ U

  data _โท_ : U โ U โ Set where
    uniteโl :  {t : U} โ ๐ โ t โท t
    unitiโl :  {t : U} โ t โท ๐ โ t
    uniteโr :  {t : U} โ t โ ๐ โท t
    unitiโr :  {t : U} โ t โท t โ ๐
    swapโ   :  {tโ tโ : U} โ (tโ โ tโ) โท (tโ โ tโ)
    assoclโ :  {tโ tโ tโ : U} โ tโ โ (tโ โ tโ) โท (tโ โ tโ) โ tโ
    assocrโ :  {tโ tโ tโ : U} โ (tโ โ tโ) โ tโ โท tโ โ (tโ โ tโ)
    uniteโl :  {t : U} โ ๐ โ t โท t
    unitiโl :  {t : U} โ t โท ๐ โ t
    uniteโr :  {t : U} โ t โ ๐ โท t
    unitiโr :  {t : U} โ t โท t โ ๐
    swapโ   :  {tโ tโ : U} โ tโ โ tโ โท tโ โ tโ
    assoclโ :  {tโ tโ tโ : U} โ tโ โ (tโ โ tโ) โท (tโ โ tโ) โ tโ
    assocrโ :  {tโ tโ tโ : U} โ (tโ โ tโ) โ tโ โท tโ โ (tโ โ tโ)
    absorbr :  {t : U} โ ๐ โ t โท ๐
    absorbl :  {t : U} โ t โ ๐ โท ๐
    factorzr :  {t : U} โ ๐ โท t โ ๐
    factorzl :  {t : U} โ ๐ โท ๐ โ t
    dist :  {tโ tโ tโ : U} โ (tโ โ tโ) โ tโ โท (tโ โ tโ) โ (tโ โ tโ)
    factor :  {tโ tโ tโ : U} โ (tโ โ tโ) โ (tโ โ tโ) โท (tโ โ tโ) โ tโ
    distl :  {tโ tโ tโ : U} โ tโ โ (tโ โ tโ) โท (tโ โ tโ) โ (tโ โ tโ)
    factorl :  {tโ tโ tโ : U} โ (tโ โ tโ) โ (tโ โ tโ) โท tโ โ (tโ โ tโ)
    idโท :  {t : U} โ t โท t
    _โ_ :  {tโ tโ tโ : U} โ (tโ โท tโ) โ (tโ โท tโ) โ (tโ โท tโ)
    _โ_ :  {tโ tโ tโ tโ : U} โ (tโ โท tโ) โ (tโ โท tโ) โ (tโ โ tโ โท tโ โ tโ)
    _โ_ :  {tโ tโ tโ tโ : U} โ (tโ โท tโ) โ (tโ โท tโ) โ (tโ โ tโ โท tโ โ tโ)
    -- not complete

โฆ_โง : U โ Set
โฆ ๐ โง = โฅ
โฆ ๐ โง = โค
โฆ tโ โ tโ โง = โฆ tโ โง โ โฆ tโ โง
โฆ tโ โ tโ โง = โฆ tโ โง ร โฆ tโ โง
โฆ t โ p โง = {!!} -- a type whose elimination rule handles the nondeterminism

open import Data.Nat as โ using (โ)
open import Data.Integer as โค using (+_)
open import Rational+ as โ

โฃ_โฃ : U โ โ
โฃ ๐ โฃ = + 0 รท 1
โฃ ๐ โฃ = + 1 รท 1
โฃ tโ โ tโ โฃ = โฃ tโ โฃ + โฃ tโ โฃ
โฃ tโ โ tโ โฃ = โฃ tโ โฃ * โฃ tโ โฃ
โฃ t โ p โฃ = {!!} -- โฃ t โฃ / order p

open import Universe

U-univ : Universe _ _
U-univ = record { U = U; El = โฆ_โง }
