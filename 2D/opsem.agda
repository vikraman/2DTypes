{-# OPTIONS --without-K #-}

module 2D.opsem where

open import Level using () renaming (zero to l0; suc to lsuc)
open import Universe using (Universe)
open import Data.Empty
open import Data.Bool
open import Data.Sum hiding ([_,_])
open import Data.Product
open import Categories.Category using (Category)
open import Categories.Groupoid using (Groupoid)
open import Data.Unit using (‚ä§; tt)
open import Data.Nat using (‚Ñï; suc; _‚â•_) renaming (_+_ to _‚Ñï+_)
open import Data.Integer
  using (‚Ñ§; +_; -[1+_])
  renaming (-_ to ‚Ñ§-; suc to ‚Ñ§suc; _+_ to _‚Ñ§+_)
open import Rational+ renaming (_+_ to _‚Ñö+_; _*_ to _‚Ñö*_)
  hiding (_‚â§_; _‚â§?_)
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; refl; trans; subst)
open import Categories.Groupoid.Sum using () renaming (Sum to GSum)
open import Categories.Groupoid.Product using () renaming (Product to GProduct)

open import 2D.Types
open import 2D.Frac
open import 2D.Order

------------------------------------------------------------------------------
-- Values

V : (T : U) ‚Üí Set
V T = let ‚ÑÇ , _ = ‚ü¶ T ‚üß
          open Category ‚ÑÇ
      in Œ£[ v ‚àà Obj ] (v ‚áí v)

-- Examples:

-- fractional values

fv : {œÑ : U} ‚Üí (p : œÑ ‚ü∑ œÑ) (i : ‚Ñ§) ‚Üí V (1/# p)
fv p i = (tt , perm i (p ^ i) id‚áî)

-- combinator values

cv : {œÑ : U} ‚Üí (p : œÑ ‚ü∑ œÑ) (i : ‚Ñ§) ‚Üí V (# p)
cv p i = (perm i (p ^ i) id‚áî , id‚áî)

-- left and right injections

inj‚ÇÅ/ : {T‚ÇÅ T‚ÇÇ : U} ‚Üí V T‚ÇÅ ‚Üí V (T‚ÇÅ ‚äï T‚ÇÇ)
inj‚ÇÅ/ (v , av) = (inj‚ÇÅ v , av)

inj‚ÇÇ/ : {T‚ÇÅ T‚ÇÇ : U} ‚Üí V T‚ÇÇ ‚Üí V (T‚ÇÅ ‚äï T‚ÇÇ)
inj‚ÇÇ/ (v , av) = (inj‚ÇÇ v , av)

-- pairing

[_,_] : {T‚ÇÅ T‚ÇÇ : U} ‚Üí V T‚ÇÅ ‚Üí V T‚ÇÇ ‚Üí V (T‚ÇÅ ‚äó T‚ÇÇ)
[ (v‚ÇÅ , av‚ÇÅ) , (v‚ÇÇ , av‚ÇÇ) ] = ((v‚ÇÅ , v‚ÇÇ) , (av‚ÇÅ , av‚ÇÇ))

--
BOOL : U
BOOL = ùüô ‚äï ùüô

NOT : BOOL ‚ü∑ BOOL
NOT = Prim swap‚Çä

v‚ÇÅ : V BOOL
v‚ÇÅ = (inj‚ÇÅ tt , refl)

v‚ÇÇ v‚ÇÉ : V (# NOT)
v‚ÇÇ = cv NOT (+ 0)
v‚ÇÉ = cv NOT (+ 1)

v‚ÇÑ v‚ÇÖ : V (1/# NOT)
v‚ÇÑ = fv NOT (+ 0)
v‚ÇÖ = fv NOT (+ 1)

v‚ÇÜ v‚Çá : V (# NOT ‚äï BOOL)
v‚ÇÜ = inj‚ÇÅ/ {T‚ÇÅ = # NOT} {T‚ÇÇ = BOOL} v‚ÇÇ
v‚Çá = inj‚ÇÇ/ {T‚ÇÅ = # NOT} {T‚ÇÇ = BOOL} v‚ÇÅ

v‚Çà : V (# NOT ‚äó BOOL)
v‚Çà = [_,_] {T‚ÇÅ = # NOT} {T‚ÇÇ = BOOL} v‚ÇÇ v‚ÇÅ

v‚Çâ : V (# NOT ‚äó 1/# NOT) -- mismatched pair
v‚Çâ = [_,_] {T‚ÇÅ = # NOT} {T‚ÇÇ = 1/# NOT} v‚ÇÇ v‚ÇÖ 

------------------------------------------------------------------------------
-- evaluation of simple combinators forwards and backwards

prim : {T‚ÇÅ T‚ÇÇ : U} ‚Üí (Prim‚ü∑ T‚ÇÅ T‚ÇÇ) ‚Üí V T‚ÇÅ ‚Üí V T‚ÇÇ
prim unite‚Çäl (inj‚ÇÅ () , av)
prim unite‚Çäl (inj‚ÇÇ v , av) = (v , av) 
prim uniti‚Çäl (v , av) = (inj‚ÇÇ v , av)
prim unite‚Çär (inj‚ÇÅ v , av) = (v , av)
prim unite‚Çär (inj‚ÇÇ () , av)
prim uniti‚Çär (v , av) = (inj‚ÇÅ v , av)
prim swap‚Çä (inj‚ÇÅ v , av) = (inj‚ÇÇ v , av)
prim swap‚Çä (inj‚ÇÇ v , av) = (inj‚ÇÅ v , av)
prim assocl‚Çä (inj‚ÇÅ v , av) = (inj‚ÇÅ (inj‚ÇÅ v) , av)
prim assocl‚Çä ((inj‚ÇÇ (inj‚ÇÅ v)) , av) = (inj‚ÇÅ (inj‚ÇÇ v) , av)
prim assocl‚Çä ((inj‚ÇÇ (inj‚ÇÇ v)) , av) = (inj‚ÇÇ v , av)
prim assocr‚Çä ((inj‚ÇÅ (inj‚ÇÅ v)) , av) = (inj‚ÇÅ v , av)
prim assocr‚Çä ((inj‚ÇÅ (inj‚ÇÇ v)) , av) = (inj‚ÇÇ (inj‚ÇÅ v) , av)
prim assocr‚Çä (inj‚ÇÇ v , av) = (inj‚ÇÇ (inj‚ÇÇ v) , av)
prim unite‚ãÜl ((tt , v) , (_ , av)) = (v , av)
prim uniti‚ãÜl (v , av) = (tt , v) , (refl , av)
prim unite‚ãÜr ((v , tt) , (av , _)) = (v , av)
prim uniti‚ãÜr (v , av) = ((v , tt) , (av , refl))
prim swap‚ãÜ ((v‚ÇÅ , v‚ÇÇ) , (av‚ÇÅ , av‚ÇÇ)) = ((v‚ÇÇ , v‚ÇÅ) , (av‚ÇÇ , av‚ÇÅ))
prim assocl‚ãÜ ((v‚ÇÅ , (v‚ÇÇ , v‚ÇÉ)) , (av‚ÇÅ , (av‚ÇÇ , av‚ÇÉ))) = (((v‚ÇÅ , v‚ÇÇ) , v‚ÇÉ) , ((av‚ÇÅ , av‚ÇÇ) , av‚ÇÉ))
prim assocr‚ãÜ (((v‚ÇÅ , v‚ÇÇ) , v‚ÇÉ) , ((av‚ÇÅ , av‚ÇÇ) , av‚ÇÉ)) = ((v‚ÇÅ , (v‚ÇÇ , v‚ÇÉ)) , ((av‚ÇÅ , (av‚ÇÇ , av‚ÇÉ))))
prim absorbr ((v , _) , (av , _)) = (v , av)
prim absorbl ((_ , v) , (_ , av)) = (v , av)
prim factorzr (() , _)
prim factorzl (() , _)
prim dist ((inj‚ÇÅ v‚ÇÅ , v‚ÇÉ) , (av‚ÇÅ , av‚ÇÉ)) = (inj‚ÇÅ (v‚ÇÅ , v‚ÇÉ) , (av‚ÇÅ , av‚ÇÉ))
prim dist ((inj‚ÇÇ v‚ÇÇ , v‚ÇÉ) , (av‚ÇÇ , av‚ÇÉ)) = (inj‚ÇÇ (v‚ÇÇ , v‚ÇÉ) , (av‚ÇÇ , av‚ÇÉ))
prim factor (inj‚ÇÅ (v‚ÇÅ , v‚ÇÉ) , av) = ((inj‚ÇÅ v‚ÇÅ , v‚ÇÉ) , av)
prim factor (inj‚ÇÇ (v‚ÇÇ , v‚ÇÉ) , av) = ((inj‚ÇÇ v‚ÇÇ , v‚ÇÉ) , av)
prim distl ((v‚ÇÉ , inj‚ÇÅ v‚ÇÅ) , (av‚ÇÉ , av‚ÇÅ)) = (inj‚ÇÅ (v‚ÇÉ , v‚ÇÅ) , (av‚ÇÉ , av‚ÇÅ))
prim distl ((v‚ÇÉ , inj‚ÇÇ v‚ÇÇ) , (av‚ÇÉ , av‚ÇÇ)) = (inj‚ÇÇ (v‚ÇÉ , v‚ÇÇ) , (av‚ÇÉ , av‚ÇÇ))
prim factorl (inj‚ÇÅ (v‚ÇÉ , v‚ÇÅ) , av) = ((v‚ÇÉ , inj‚ÇÅ v‚ÇÅ) , av)
prim factorl (inj‚ÇÇ (v‚ÇÉ , v‚ÇÇ) , av) = ((v‚ÇÉ , inj‚ÇÇ v‚ÇÇ) , av)
prim id‚ü∑ v = v

prim‚Åª¬π : {T‚ÇÅ T‚ÇÇ : U} ‚Üí (Prim‚ü∑ T‚ÇÅ T‚ÇÇ) ‚Üí V T‚ÇÇ ‚Üí V T‚ÇÅ
prim‚Åª¬π uniti‚Çäl (inj‚ÇÅ () , av)
prim‚Åª¬π uniti‚Çäl (inj‚ÇÇ v , av) = (v , av) 
prim‚Åª¬π unite‚Çäl (v , av) = (inj‚ÇÇ v , av)
prim‚Åª¬π uniti‚Çär (inj‚ÇÅ v , av) = (v , av)
prim‚Åª¬π uniti‚Çär (inj‚ÇÇ () , av)
prim‚Åª¬π unite‚Çär (v , av) = (inj‚ÇÅ v , av)
prim‚Åª¬π swap‚Çä (inj‚ÇÅ v , av) = (inj‚ÇÇ v , av)
prim‚Åª¬π swap‚Çä (inj‚ÇÇ v , av) = (inj‚ÇÅ v , av)
prim‚Åª¬π assocr‚Çä (inj‚ÇÅ v , av) = (inj‚ÇÅ (inj‚ÇÅ v) , av)
prim‚Åª¬π assocr‚Çä ((inj‚ÇÇ (inj‚ÇÅ v)) , av) = (inj‚ÇÅ (inj‚ÇÇ v) , av)
prim‚Åª¬π assocr‚Çä ((inj‚ÇÇ (inj‚ÇÇ v)) , av) = (inj‚ÇÇ v , av)
prim‚Åª¬π assocl‚Çä ((inj‚ÇÅ (inj‚ÇÅ v)) , av) = (inj‚ÇÅ v , av)
prim‚Åª¬π assocl‚Çä ((inj‚ÇÅ (inj‚ÇÇ v)) , av) = (inj‚ÇÇ (inj‚ÇÅ v) , av)
prim‚Åª¬π assocl‚Çä (inj‚ÇÇ v , av) = (inj‚ÇÇ (inj‚ÇÇ v) , av)
prim‚Åª¬π uniti‚ãÜl ((tt , v) , (_ , av)) = (v , av)
prim‚Åª¬π unite‚ãÜl (v , av) = (tt , v) , (refl , av)
prim‚Åª¬π uniti‚ãÜr ((v , tt) , (av , _)) = (v , av)
prim‚Åª¬π unite‚ãÜr (v , av) = ((v , tt) , (av , refl))
prim‚Åª¬π swap‚ãÜ ((v‚ÇÅ , v‚ÇÇ) , (av‚ÇÅ , av‚ÇÇ)) = ((v‚ÇÇ , v‚ÇÅ) , (av‚ÇÇ , av‚ÇÅ))
prim‚Åª¬π assocr‚ãÜ ((v‚ÇÅ , (v‚ÇÇ , v‚ÇÉ)) , (av‚ÇÅ , (av‚ÇÇ , av‚ÇÉ))) = (((v‚ÇÅ , v‚ÇÇ) , v‚ÇÉ) , ((av‚ÇÅ , av‚ÇÇ) , av‚ÇÉ))
prim‚Åª¬π assocl‚ãÜ (((v‚ÇÅ , v‚ÇÇ) , v‚ÇÉ) , ((av‚ÇÅ , av‚ÇÇ) , av‚ÇÉ)) = ((v‚ÇÅ , (v‚ÇÇ , v‚ÇÉ)) , ((av‚ÇÅ , (av‚ÇÇ , av‚ÇÉ))))
prim‚Åª¬π factorzl ((v , _) , (av , _)) = (v , av)
prim‚Åª¬π factorzr ((_ , v) , (_ , av)) = (v , av)
prim‚Åª¬π absorbl (() , _)
prim‚Åª¬π absorbr (() , _)
prim‚Åª¬π factor ((inj‚ÇÅ v‚ÇÅ , v‚ÇÉ) , (av‚ÇÅ , av‚ÇÉ)) = (inj‚ÇÅ (v‚ÇÅ , v‚ÇÉ) , (av‚ÇÅ , av‚ÇÉ))
prim‚Åª¬π factor ((inj‚ÇÇ v‚ÇÇ , v‚ÇÉ) , (av‚ÇÇ , av‚ÇÉ)) = (inj‚ÇÇ (v‚ÇÇ , v‚ÇÉ) , (av‚ÇÇ , av‚ÇÉ))
prim‚Åª¬π dist (inj‚ÇÅ (v‚ÇÅ , v‚ÇÉ) , av) = ((inj‚ÇÅ v‚ÇÅ , v‚ÇÉ) , av)
prim‚Åª¬π dist (inj‚ÇÇ (v‚ÇÇ , v‚ÇÉ) , av) = ((inj‚ÇÇ v‚ÇÇ , v‚ÇÉ) , av)
prim‚Åª¬π factorl ((v‚ÇÉ , inj‚ÇÅ v‚ÇÅ) , (av‚ÇÉ , av‚ÇÅ)) = (inj‚ÇÅ (v‚ÇÉ , v‚ÇÅ) , (av‚ÇÉ , av‚ÇÅ))
prim‚Åª¬π factorl ((v‚ÇÉ , inj‚ÇÇ v‚ÇÇ) , (av‚ÇÉ , av‚ÇÇ)) = (inj‚ÇÇ (v‚ÇÉ , v‚ÇÇ) , (av‚ÇÉ , av‚ÇÇ))
prim‚Åª¬π distl (inj‚ÇÅ (v‚ÇÉ , v‚ÇÅ) , av) = ((v‚ÇÉ , inj‚ÇÅ v‚ÇÅ) , av)
prim‚Åª¬π distl (inj‚ÇÇ (v‚ÇÉ , v‚ÇÇ) , av) = ((v‚ÇÉ , inj‚ÇÇ v‚ÇÇ) , av)
prim‚Åª¬π id‚ü∑ v = v

------------------------------------------------------------------------------
-- Contexts and machine states

-- Context T1 T2 T3 is a context missing T1 ‚áø T2 combinator and which
-- returns T3 as final answer

data Context : U ‚Üí U ‚Üí U ‚Üí Set where
  Empty : {T : U} ‚Üí Context T T T
  Fst : {T‚ÇÅ T‚ÇÇ T‚ÇÉ T : U} ‚Üí
    (C : Context T‚ÇÅ T‚ÇÉ T) ‚Üí (P‚ÇÇ : T‚ÇÇ ‚ü∑ T‚ÇÉ) ‚Üí Context T‚ÇÅ T‚ÇÇ T
  Snd : {T‚ÇÅ T‚ÇÇ T‚ÇÉ T : U} ‚Üí
    (P‚ÇÅ : T‚ÇÅ ‚ü∑ T‚ÇÇ) ‚Üí (C : Context T‚ÇÅ T‚ÇÉ T) ‚Üí Context T‚ÇÇ T‚ÇÉ T
  L√ó : {T‚ÇÅ T‚ÇÇ T‚ÇÉ T‚ÇÑ T : U} ‚Üí
    (C : Context (T‚ÇÅ ‚äó T‚ÇÇ) (T‚ÇÉ ‚äó T‚ÇÑ) T) ‚Üí
    (P‚ÇÇ : T‚ÇÇ ‚ü∑ T‚ÇÑ) ‚Üí V T‚ÇÇ ‚Üí Context T‚ÇÅ T‚ÇÉ T
  R√ó : {T‚ÇÅ T‚ÇÇ T‚ÇÉ T‚ÇÑ T : U} ‚Üí
    (P‚ÇÅ : T‚ÇÅ ‚ü∑ T‚ÇÉ) ‚Üí V T‚ÇÉ ‚Üí
    (C : Context (T‚ÇÅ ‚äó T‚ÇÇ) (T‚ÇÉ ‚äó T‚ÇÑ) T) ‚Üí Context T‚ÇÇ T‚ÇÑ T
  L+ : {T‚ÇÅ T‚ÇÇ T‚ÇÉ T‚ÇÑ T : U} ‚Üí
    (C : Context (T‚ÇÅ ‚äï T‚ÇÇ) (T‚ÇÉ ‚äï T‚ÇÑ) T) ‚Üí (P‚ÇÇ : T‚ÇÇ ‚ü∑ T‚ÇÑ) ‚Üí 
    Context T‚ÇÅ T‚ÇÉ T
  R+ : {T‚ÇÅ T‚ÇÇ T‚ÇÉ T‚ÇÑ T : U} ‚Üí
    (P‚ÇÅ : T‚ÇÅ ‚ü∑ T‚ÇÉ) ‚Üí (C : Context (T‚ÇÅ ‚äï T‚ÇÇ) (T‚ÇÉ ‚äï T‚ÇÑ) T) ‚Üí 
    Context T‚ÇÇ T‚ÇÑ T

data State : U ‚Üí Set where
  Enter : {T‚ÇÅ T‚ÇÇ T : U} ‚Üí
    (P : T‚ÇÅ ‚ü∑ T‚ÇÇ) ‚Üí V T‚ÇÅ ‚Üí Context T‚ÇÅ T‚ÇÇ T ‚Üí State T
  Exit : {T‚ÇÅ T‚ÇÇ T : U} ‚Üí
    (P : T‚ÇÅ ‚ü∑ T‚ÇÇ) ‚Üí V T‚ÇÇ ‚Üí Context T‚ÇÅ T‚ÇÇ T ‚Üí State T

data Dir : Set where
  Fwd : Dir
  Bck : Dir

------------------------------------------------------------------------------
-- Evaluation

open import Relation.Nullary
open import Data.Nat.DivMod using (_mod_)
open import Data.Fin using (to‚Ñï)
open import Relation.Nullary.Decidable

n‚â•1‚áín‚â†0 : ‚àÄ {n} ‚Üí n ‚â• 1 ‚Üí ¬¨ (n ‚â° 0)
n‚â•1‚áín‚â†0 (Data.Nat.s‚â§s n‚â•1) ()

eq‚Ñï : (n m : ‚Ñï) ‚Üí Bool
eq‚Ñï ‚Ñï.zero ‚Ñï.zero = true
eq‚Ñï ‚Ñï.zero (suc m) = false
eq‚Ñï (suc n) ‚Ñï.zero = false
eq‚Ñï (suc n) (suc m) = eq‚Ñï n m

negModn : (n m : ‚Ñï) ‚Üí ‚Ñï
negModn ‚Ñï.zero m = ‚Ñï.zero
negModn (suc n) m = (to‚Ñï (m mod (suc n))) ‚Ñï+ (suc n)

mmod : (m n : ‚Ñï) ‚Üí n ‚â• 1 ‚Üí ‚Ñï
mmod m n n‚â•1 = to‚Ñï (_mod_ m n {fromWitnessFalse (n‚â•1‚áín‚â†0 n‚â•1)})

_‚áî?_ : {œÑ : U} {p : œÑ ‚ü∑ œÑ} ‚Üí (q r : Perm p) ‚Üí Bool
_‚áî?_ {p = p} (perm i q Œ±) (perm j r Œ≥) with order p
perm (+_ n‚ÇÅ) q Œ± ‚áî? perm (+_ n‚ÇÇ) r Œ≥ | ord n n‚â•1 p^n‚áîid‚ü∑ =
  eq‚Ñï (mmod n‚ÇÅ n n‚â•1) (mmod n‚ÇÇ n n‚â•1)
perm (+_ n‚ÇÅ) q Œ± ‚áî? perm (-[1+_] n‚ÇÇ) r Œ≥ | ord n n‚â•1 p^n‚áîid‚ü∑ =
  eq‚Ñï (mmod n‚ÇÅ n n‚â•1) (mmod (negModn n n‚ÇÇ) n n‚â•1)
perm (-[1+_] n‚ÇÅ) q Œ± ‚áî? perm (+_ n‚ÇÇ) r Œ≥ | ord n n‚â•1 p^n‚áîid‚ü∑ =
  eq‚Ñï (mmod (negModn n n‚ÇÅ) n n‚â•1) (mmod n‚ÇÇ n n‚â•1)
perm (-[1+_] n‚ÇÅ) q Œ± ‚áî? perm (-[1+_] n‚ÇÇ) r Œ≥ | ord n n‚â•1 p^n‚áîid‚ü∑ =
  eq‚Ñï (mmod n‚ÇÅ n n‚â•1) (mmod n‚ÇÇ n n‚â•1)

-- Forward execution one step at a time

ap : {T : U} ‚Üí (s : State T) ‚Üí Dir √ó State T
-- primitives
ap (Enter (Prim c) v C) =
  Fwd , Exit (Prim c) (prim c v) C
-- sequential composition
ap (Enter (P‚ÇÅ ‚óé P‚ÇÇ) v C) =
  Fwd , Enter P‚ÇÅ v (Fst C P‚ÇÇ)
ap (Exit P‚ÇÅ v (Fst C P‚ÇÇ)) =
  Fwd , Enter P‚ÇÇ v (Snd P‚ÇÅ C) 
ap (Exit P‚ÇÇ v‚ÇÇ (Snd P‚ÇÅ C)) =
  Fwd , Exit (P‚ÇÅ ‚óé P‚ÇÇ) v‚ÇÇ C
-- choice composition
ap (Enter (P‚ÇÅ ‚äï P‚ÇÇ) (inj‚ÇÅ v‚ÇÅ , av‚ÇÅ) C) =
  Fwd , Enter P‚ÇÅ (v‚ÇÅ , av‚ÇÅ) (L+ C P‚ÇÇ)
ap (Exit P‚ÇÅ (v‚ÇÅ , av) (L+ C P‚ÇÇ)) =
  Fwd , Exit (P‚ÇÅ ‚äï P‚ÇÇ) (inj‚ÇÅ v‚ÇÅ , av) C  
ap (Enter (P‚ÇÅ ‚äï P‚ÇÇ) (inj‚ÇÇ v‚ÇÇ , av‚ÇÇ) C) =
  Fwd , Enter P‚ÇÇ (v‚ÇÇ , av‚ÇÇ) (R+ P‚ÇÅ C)
ap (Exit P‚ÇÇ (v‚ÇÇ , av) (R+ P‚ÇÅ C)) =
  Fwd , Exit (P‚ÇÅ ‚äï P‚ÇÇ) (inj‚ÇÇ v‚ÇÇ , av) C 
-- parallel composition
ap (Enter (P‚ÇÅ ‚äó P‚ÇÇ) ((v‚ÇÅ , v‚ÇÇ) , (av‚ÇÅ , av‚ÇÇ)) C) =
  Fwd , Enter P‚ÇÅ (v‚ÇÅ , av‚ÇÅ) (L√ó C P‚ÇÇ (v‚ÇÇ , av‚ÇÇ))
ap (Exit P‚ÇÅ v‚ÇÅ (L√ó C P‚ÇÇ v‚ÇÇ)) =
  Fwd , Enter P‚ÇÇ v‚ÇÇ (R√ó P‚ÇÅ v‚ÇÅ C)
ap (Exit P‚ÇÇ (v‚ÇÇ , av‚ÇÇ) (R√ó P‚ÇÅ (v‚ÇÅ , av‚ÇÅ) C)) =
  Fwd , Exit (P‚ÇÅ ‚äó P‚ÇÇ) (((v‚ÇÅ , v‚ÇÇ) , (av‚ÇÅ , av‚ÇÇ))) C 
-- eta and epsilon
ap (Enter (Œ∑+ P) (tt , _) C) =
  Fwd , Exit (Œ∑+ P)
        ((perm (+ 1) P idr‚óér , tt) , (id‚áî , perm (+ 1) P idr‚óér))
        C
ap (Enter (Œ∑- P) (tt , _) C) =
  Fwd , Exit (Œ∑- P)
        ((tt , perm (+ 1) P idr‚óér) , (perm (+ 1) P idr‚óér , id‚áî))
        C
ap (Enter (Œµ+ P) ((perm i q Œ± , tt) , (Œ≤ , perm j r Œ≥)) C) =
   if ((perm i q Œ±) ‚áî? (perm j r Œ≥))
     then Fwd , Exit (Œµ+ P) (tt , refl) C
     else Bck , Enter (Œµ+ P) ((perm i q Œ± , tt) , (Œ≤ , perm j r Œ≥)) C
ap (Enter (Œµ- P) ((tt , perm i q Œ±) , (perm j r Œ≥ , Œ≤)) C) =
   if ((perm i q Œ±) ‚áî? (perm j r Œ≥))
     then Fwd , Exit (Œµ- P) (tt , refl) C
     else Bck , Enter (Œµ- P) (((tt , perm i q Œ±) , (perm j r Œ≥ , Œ≤))) C
-- done
ap (Exit P v Empty) = Fwd , Exit P v Empty

-- Reverse execution one step at a time

ap‚Åª¬π : {T : U} ‚Üí State T ‚Üí Dir √ó State T
-- primitives
ap‚Åª¬π (Exit (Prim c) v C) =
  Bck , Enter (Prim c) (prim‚Åª¬π c v) C
-- sequential composition
ap‚Åª¬π (Exit (P‚ÇÅ ‚óé P‚ÇÇ) v C) =
  Bck , Exit P‚ÇÇ v (Snd P‚ÇÅ C)
ap‚Åª¬π (Enter P‚ÇÇ v‚ÇÇ (Snd P‚ÇÅ C)) =
  Bck , Exit P‚ÇÅ v‚ÇÇ (Fst C P‚ÇÇ)
ap‚Åª¬π (Enter P‚ÇÅ v (Fst C P‚ÇÇ)) =
  Bck , Enter (P‚ÇÅ ‚óé P‚ÇÇ) v C 
-- choice composition
ap‚Åª¬π (Exit (P‚ÇÅ ‚äï P‚ÇÇ) (inj‚ÇÅ v‚ÇÅ , av) C) =
  Bck , Exit P‚ÇÅ (v‚ÇÅ , av) (L+ C P‚ÇÇ) 
ap‚Åª¬π (Enter P‚ÇÅ (v‚ÇÅ , av) (L+ C P‚ÇÇ)) =
  Bck , Enter (P‚ÇÅ ‚äï P‚ÇÇ) (inj‚ÇÅ v‚ÇÅ , av) C  
ap‚Åª¬π (Exit (P‚ÇÅ ‚äï P‚ÇÇ) (inj‚ÇÇ v‚ÇÇ , av) C) =
  Bck , Exit P‚ÇÇ (v‚ÇÇ , av) (R+ P‚ÇÅ C) 
ap‚Åª¬π (Enter P‚ÇÇ (v‚ÇÇ , av) (R+ P‚ÇÅ C)) =
  Bck , Enter (P‚ÇÅ ‚äï P‚ÇÇ) (inj‚ÇÇ v‚ÇÇ , av) C 
-- parallel composition
ap‚Åª¬π (Exit (P‚ÇÅ ‚äó P‚ÇÇ) ((v‚ÇÅ , v‚ÇÇ) , (av‚ÇÅ , av‚ÇÇ)) C) =
  Bck , Exit P‚ÇÇ (v‚ÇÇ , av‚ÇÇ) (R√ó P‚ÇÅ (v‚ÇÅ , av‚ÇÅ) C)
ap‚Åª¬π (Enter P‚ÇÇ (v‚ÇÇ , av‚ÇÇ) (R√ó P‚ÇÅ (v‚ÇÅ , av‚ÇÅ) C)) =
  Bck , Exit P‚ÇÅ (v‚ÇÅ , av‚ÇÅ) (L√ó C P‚ÇÇ (v‚ÇÇ , av‚ÇÇ))
ap‚Åª¬π (Enter P‚ÇÅ (v‚ÇÅ , av‚ÇÅ) (L√ó C P‚ÇÇ (v‚ÇÇ , av‚ÇÇ))) =
  Bck , Enter (P‚ÇÅ ‚äó P‚ÇÇ) (((v‚ÇÅ , v‚ÇÇ) , (av‚ÇÅ , av‚ÇÇ))) C 
-- eta and epsilon
ap‚Åª¬π (Exit (Œµ+ P) (tt , _) C) =
  -- if forward execution proceeded past Œµ with p^5 we backtrack using p; this may cause
  -- that we never reach a fixed point even if one exists
  Bck , Enter (Œµ+ P)
        ((perm (+ 1) P idr‚óér , tt) , (id‚áî , perm (+ 1) P idr‚óér))
        C
ap‚Åª¬π (Exit (Œµ- P) (tt , _) C) =
  Bck , Enter (Œµ- P)
        ((tt , perm (+ 1) P idr‚óér) , (perm (+ 1) P idr‚óér , id‚áî))
        C
ap‚Åª¬π (Exit (Œ∑+ P) ((perm i q Œ± , tt) , (Œ≤ , perm j r Œ≥)) C) =
  -- what should really happen is that Œ∑ counts how many times backtracking reaches here
  -- and after it exhausts all the choice, it lets execution proceed backwards for other
  -- Œ∑s upstream to get a chance at revisiting their choices
   Fwd , Exit (Œ∑+ P)
             ( ((perm (‚Ñ§suc i) (P ‚óé q)
               (trans‚áî (id‚áî ‚ä° Œ±)
               (trans‚áî (idr‚óér ‚ä° id‚áî)
               (2! (lower {p = P} (+ 1) i))))) , tt)
             , (id‚áî , (perm (‚Ñ§suc i) (P ‚óé q)
               (trans‚áî (id‚áî ‚ä° Œ±)
               (trans‚áî (idr‚óér ‚ä° id‚áî)
               (2! (lower {p = P} (+ 1) i)))))))
             C
ap‚Åª¬π (Exit (Œ∑- P) ((tt , perm i q Œ±) , (perm j r Œ≥ , Œ≤)) C) =
--   if ((perm i q Œ±) ‚áî? (perm j r Œ≥))
--     then Bck , Enter (Œ∑- P) (tt , refl) C
--     else Fwd , Exit (Œ∑- P) (((tt , perm i q Œ±) , (perm j r Œ≥ , Œ≤))) C
 Fwd , Exit (Œ∑- P)
             ( (tt , (perm (‚Ñ§suc i) (P ‚óé q)
               (trans‚áî (id‚áî ‚ä° Œ±)
               (trans‚áî (idr‚óér ‚ä° id‚áî)
               (2! (lower {p = P} (+ 1) i))))))
             , ((perm (‚Ñ§suc i) (P ‚óé q)
               (trans‚áî (id‚áî ‚ä° Œ±)
               (trans‚áî (idr‚óér ‚ä° id‚áî)
               (2! (lower {p = P} (+ 1) i))))) , id‚áî))
             C
-- done 
ap‚Åª¬π (Enter P v Empty) = Bck , Enter P v Empty 

-- big step execution

{-# NON_TERMINATING #-}

mutual 
  loopFwd : {T : U} ‚Üí (s : State T) ‚Üí V T
  loopFwd s with ap s 
  ... | Fwd , (Exit _ v Empty) = v
  ... | Fwd , s' = loopFwd s' 
  ... | Bck , s' = loopBck s'

  loopBck : {T : U} ‚Üí State T ‚Üí V T
  loopBck s with ap‚Åª¬π s
  ... | Bck , (Enter _ v Empty) = v
  ... | Bck , s' = loopBck s'
  ... | Fwd , s' = loopFwd s'

------------------------------------------------------------------------------
-- Examples and thoughts

-- Credit card example

cc : # NOT ‚ü∑ # NOT
cc = Prim uniti‚ãÜl ‚óé
     (((Œ∑+ NOT) ‚äó Prim id‚ü∑) ‚óé
     ((Prim assocr‚ãÜ ‚óé
     ((Prim id‚ü∑ ‚äó Prim swap‚ãÜ) ‚óé
     ((Prim id‚ü∑ ‚äó (Œµ+ NOT)) ‚óé
     Prim unite‚ãÜr)))))

t0 = loopFwd (Enter cc (cv NOT (+ 0)) Empty)
-- evals to:
-- perm (+ 2)
--      (Prim swap‚Çä ‚óé Prim swap‚Çä)
--      (trans‚áî (id‚áî ‚ä° idr‚óér)
--      (trans‚áî (idr‚óér ‚ä° id‚áî) (trans‚áî assoc‚óér (id‚áî ‚ä° idl‚óél))))
-- , id‚áî
t1 = loopFwd (Enter cc (cv NOT (+ 1)) Empty)
-- evals to: perm (+ 1) (Prim swap‚Çä) idr‚óér , id‚áî
t2 = loopBck (Enter cc (cv NOT (+ 0)) Empty)
-- evals to: perm (+ 0) (Prim id‚ü∑) id‚áî , id‚áî
t3 = loopBck (Enter cc (cv NOT (+ 1)) Empty)
-- evals to: perm (+ 1) (Prim swap‚Çä ‚óé Prim id‚ü∑) id‚áî , id‚áî

{-
%% -- Trivial implementation of eta/epsilon that does
%% -- type check (see below).  Might be interesting to figure out why
%% -- that is:
%% -- ap/ (Œ∑ {œÑ} {p}) (v , av) =
%% --   (((+ 0) , (p , id‚áî)) , tt) , (id‚áî , ((+ 0) , (p , id‚áî)))
%% -- ap/ Œµ (v , av) = tt , refl
-}

{--
ap‚Åª¬π (Exit (Œ∑+ P) ((perm i q Œ± , tt) , (Œ≤ , perm j r Œ≥)) C) =
  if (q ‚áî? r)
  then Bck , Enter (Œ∑+ P) (tt , refl) C
  else Fwd , Exit (Œ∑+ P)
             ( ((perm (‚Ñ§suc i) (P ‚óé q)
               (trans‚áî (id‚áî ‚ä° Œ±)
               (trans‚áî (idr‚óér ‚ä° id‚áî)
               (2! (lower {p = P} (+ 1) i))))) , tt)
             , (id‚áî , (perm (‚Ñ§suc i) (P ‚óé q)
               (trans‚áî (id‚áî ‚ä° Œ±)
               (trans‚áî (idr‚óér ‚ä° id‚áî)
               (2! (lower {p = P} (+ 1) i)))))))
             C
ap‚Åª¬π (Exit (Œ∑- P) ((tt , perm i q Œ±) , (perm j r Œ≥ , Œ≤)) C) =
  if (q ‚áî? r)
  then Bck , Enter (Œ∑- P) (tt , refl) C
  else Fwd , Exit (Œ∑- P)
             ( (tt , (perm (‚Ñ§suc i) (P ‚óé q)
               (trans‚áî (id‚áî ‚ä° Œ±)
               (trans‚áî (idr‚óér ‚ä° id‚áî)
               (2! (lower {p = P} (+ 1) i))))))
             , ((perm (‚Ñ§suc i) (P ‚óé q)
               (trans‚áî (id‚áî ‚ä° Œ±)
               (trans‚áî (idr‚óér ‚ä° id‚áî)
               (2! (lower {p = P} (+ 1) i))))) , id‚áî))
             C
--}

------------------------------------------------------------------------------
------------------------------------------------------------------------------
