{-# OPTIONS --without-K #-}

module 2D.opsem where

open import Level using () renaming (zero to l0; suc to lsuc)
open import Universe using (Universe)
open import Data.Bool
open import Data.Sum hiding ([_,_])
open import Data.Product
open import Categories.Category using (Category)
open import Categories.Groupoid using (Groupoid)
open import Data.Unit using (‚ä§; tt)
open import Data.Nat using (‚Ñï; suc)
open import Data.Integer
  using (‚Ñ§; +_; -[1+_])
  renaming (-_ to ‚Ñ§-; suc to ‚Ñ§suc; _+_ to _‚Ñ§+_)
open import Rational+ renaming (_+_ to _‚Ñö+_; _*_ to _‚Ñö*_)
  hiding (_‚â§_; _‚â§?_)
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; refl; trans; subst)
open import Categories.Groupoid.Sum using () renaming (Sum to GSum)
open import Categories.Groupoid.Product using () renaming (Product to GProduct)

open import 2D.Types
open import 2D.Frac
--open import groupoid
--open import pifrac

V : (T : U) ‚Üí Set
V T = let ‚ÑÇ , _ = ‚ü¶ T ‚üß
          open Category ‚ÑÇ
      in Œ£[ v ‚àà Obj ] (v ‚áí v)

-- Examples:

-- Abbreviations: 

-- discrete values
-- dv : {œÑ : FT} ‚Üí Universe.El UFT œÑ ‚Üí V (‚áë œÑ)
-- dv v = (v , refl)

-- fractional values

fv : {œÑ : U} ‚Üí (p : œÑ ‚ü∑ œÑ) (i : ‚Ñ§) ‚Üí V (1/# p)
fv p i = (tt , perm i (p ^ i) id‚áî)

-- combinator values

cv : {œÑ : U} ‚Üí (p : œÑ ‚ü∑ œÑ) (i : ‚Ñ§) ‚Üí V (# p)
cv p i = (perm i (p ^ i) id‚áî , id‚áî)

-- left and right injections

inj‚ÇÅ/ : {T‚ÇÅ T‚ÇÇ : U} ‚Üí V T‚ÇÅ ‚Üí V (T‚ÇÅ ‚äï T‚ÇÇ)
inj‚ÇÅ/ (v , av) = (inj‚ÇÅ v , av)

inj‚ÇÇ/ : {T‚ÇÅ T‚ÇÇ : U} ‚Üí V T‚ÇÇ ‚Üí V (T‚ÇÅ ‚äï T‚ÇÇ)
inj‚ÇÇ/ (v , av) = (inj‚ÇÇ v , av)

-- pairing

[_,_] : {T‚ÇÅ T‚ÇÇ : U} ‚Üí V T‚ÇÅ ‚Üí V T‚ÇÇ ‚Üí V (T‚ÇÅ ‚äó T‚ÇÇ)
[ (v‚ÇÅ , av‚ÇÅ) , (v‚ÇÇ , av‚ÇÇ) ] = ((v‚ÇÅ , v‚ÇÇ) , (av‚ÇÅ , av‚ÇÇ))

--
BOOL : U
BOOL = ùüô ‚äï ùüô

NOT : BOOL ‚ü∑ BOOL
NOT = swap‚Çä

v‚ÇÅ : V BOOL
v‚ÇÅ = (inj‚ÇÅ tt , refl)

v‚ÇÇ v‚ÇÉ : V (# NOT)
v‚ÇÇ = cv NOT (+ 0)
v‚ÇÉ = cv NOT (+ 1)

v‚ÇÑ v‚ÇÖ : V (1/# NOT)
v‚ÇÑ = fv NOT (+ 0)
v‚ÇÖ = fv NOT (+ 1)

v‚ÇÜ v‚Çá : V (# NOT ‚äï BOOL)
v‚ÇÜ = inj‚ÇÅ/ {T‚ÇÅ = # NOT} {T‚ÇÇ = BOOL} v‚ÇÇ
v‚Çá = inj‚ÇÇ/ {T‚ÇÅ = # NOT} {T‚ÇÇ = BOOL} v‚ÇÅ

v‚Çà : V (# NOT ‚äó BOOL)
v‚Çà = [_,_] {T‚ÇÅ = # NOT} {T‚ÇÇ = BOOL} v‚ÇÇ v‚ÇÅ

v‚Çâ : V (# NOT ‚äó 1/# NOT) -- mismatched pair
v‚Çâ = [_,_] {T‚ÇÅ = # NOT} {T‚ÇÇ = 1/# NOT} v‚ÇÇ v‚ÇÖ 

-- Context T1 T2 T3 : missing T1 ‚áø T2 combinator;
-- returns T3 as final answer

data Context : U ‚Üí U ‚Üí U ‚Üí Set where
  Empty : {T : U} ‚Üí Context T T T
  Fst : {T‚ÇÅ T‚ÇÇ T‚ÇÉ T : U} ‚Üí
    (C : Context T‚ÇÅ T‚ÇÉ T) ‚Üí (P‚ÇÇ : T‚ÇÇ ‚ü∑ T‚ÇÉ) ‚Üí Context T‚ÇÅ T‚ÇÇ T
  Snd : {T‚ÇÅ T‚ÇÇ T‚ÇÉ T : U} ‚Üí
    (P‚ÇÅ : T‚ÇÅ ‚ü∑ T‚ÇÇ) ‚Üí (C : Context T‚ÇÅ T‚ÇÉ T) ‚Üí Context T‚ÇÇ T‚ÇÉ T
  L√ó : {T‚ÇÅ T‚ÇÇ T‚ÇÉ T‚ÇÑ T : U} ‚Üí
    (C : Context (T‚ÇÅ ‚äó T‚ÇÇ) (T‚ÇÉ ‚äó T‚ÇÑ) T) ‚Üí
    (P‚ÇÇ : T‚ÇÇ ‚ü∑ T‚ÇÑ) ‚Üí V T‚ÇÇ ‚Üí Context T‚ÇÅ T‚ÇÉ T
  R√ó : {T‚ÇÅ T‚ÇÇ T‚ÇÉ T‚ÇÑ T : U} ‚Üí
    (P‚ÇÅ : T‚ÇÅ ‚ü∑ T‚ÇÉ) ‚Üí V T‚ÇÉ ‚Üí
    (C : Context (T‚ÇÅ ‚äó T‚ÇÇ) (T‚ÇÉ ‚äó T‚ÇÑ) T) ‚Üí Context T‚ÇÇ T‚ÇÑ T
  L+ : {T‚ÇÅ T‚ÇÇ T‚ÇÉ T‚ÇÑ T : U} ‚Üí
    (C : Context (T‚ÇÅ ‚äï T‚ÇÇ) (T‚ÇÉ ‚äï T‚ÇÑ) T) ‚Üí (P‚ÇÇ : T‚ÇÇ ‚ü∑ T‚ÇÑ) ‚Üí 
    Context T‚ÇÅ T‚ÇÉ T
  R+ : {T‚ÇÅ T‚ÇÇ T‚ÇÉ T‚ÇÑ T : U} ‚Üí
    (P‚ÇÅ : T‚ÇÅ ‚ü∑ T‚ÇÉ) ‚Üí (C : Context (T‚ÇÅ ‚äï T‚ÇÇ) (T‚ÇÉ ‚äï T‚ÇÑ) T) ‚Üí 
    Context T‚ÇÇ T‚ÇÑ T

data State : U ‚Üí Set where
  Enter : {T‚ÇÅ T‚ÇÇ T : U} ‚Üí
    (P : T‚ÇÅ ‚ü∑ T‚ÇÇ) ‚Üí V T‚ÇÅ ‚Üí Context T‚ÇÅ T‚ÇÇ T ‚Üí State T
  Exit : {T‚ÇÅ T‚ÇÇ T : U} ‚Üí
    (P : T‚ÇÅ ‚ü∑ T‚ÇÇ) ‚Üí V T‚ÇÇ ‚Üí Context T‚ÇÅ T‚ÇÇ T ‚Üí State T

data Dir : Set where
  Fwd : Dir
  Bck : Dir
  Done : Dir

-- stepForward 

postulate
  _‚áî?_ : {œÑ : U} ‚Üí (œÑ ‚ü∑ œÑ) ‚Üí (œÑ ‚ü∑ œÑ) ‚Üí Bool

ap : {T : U} ‚Üí State T ‚Üí Dir √ó State T
ap (Enter unite‚Çäl (inj‚ÇÅ () , av) C)
ap (Enter unite‚Çäl (inj‚ÇÇ v , av) C) = Fwd , Exit unite‚Çäl (v , av) C
ap (Enter uniti‚Çäl (v , av) C) = Fwd , Exit uniti‚Çäl (inj‚ÇÇ v , av) C
ap (Enter unite‚Çär (inj‚ÇÅ v , av) C) = Fwd , Exit unite‚Çär (v , av) C
ap (Enter unite‚Çär (inj‚ÇÇ () , av) C)
ap (Enter uniti‚Çär (v , av) C) = Fwd , Exit uniti‚Çär (inj‚ÇÅ v , av) C
ap (Enter swap‚Çä (inj‚ÇÅ v , av) C) = Fwd , Exit swap‚Çä (inj‚ÇÇ v , av) C
ap (Enter swap‚Çä (inj‚ÇÇ v , av) C) = Fwd , Exit swap‚Çä (inj‚ÇÅ v , av) C
ap (Enter assocl‚Çä (inj‚ÇÅ v , av) C) = Fwd , Exit assocl‚Çä (inj‚ÇÅ (inj‚ÇÅ v) , av) C
ap (Enter assocl‚Çä (inj‚ÇÇ (inj‚ÇÅ v) , av) C) = Fwd , Exit assocl‚Çä (inj‚ÇÅ (inj‚ÇÇ v) , av) C
ap (Enter assocl‚Çä (inj‚ÇÇ (inj‚ÇÇ v) , av) C) = Fwd , Exit assocl‚Çä (inj‚ÇÇ v , av) C
ap (Enter assocr‚Çä (inj‚ÇÅ (inj‚ÇÅ v) , av) C) = Fwd , Exit assocr‚Çä (inj‚ÇÅ v , av) C
ap (Enter assocr‚Çä (inj‚ÇÅ (inj‚ÇÇ v) , av) C) = Fwd , Exit assocr‚Çä (inj‚ÇÇ (inj‚ÇÅ v) , av) C
ap (Enter assocr‚Çä (inj‚ÇÇ v , av) C) = Fwd , Exit assocr‚Çä (inj‚ÇÇ (inj‚ÇÇ v) , av) C
ap (Enter unite‚ãÜl ((tt , v) , (_ , av)) C) = Fwd , Exit unite‚ãÜl (v , av) C
ap (Enter uniti‚ãÜl (v , av) C) = Fwd , Exit uniti‚ãÜl ((tt , v) , (refl , av)) C
ap (Enter unite‚ãÜr ((v , tt) , (av , _)) C) = Fwd , Exit unite‚ãÜr (v , av) C
ap (Enter uniti‚ãÜr (v , av) C) = Fwd , Exit uniti‚ãÜr ((v , tt) , (av , refl)) C
ap (Enter swap‚ãÜ ((v‚ÇÅ , v‚ÇÇ) , (av‚ÇÅ , av‚ÇÇ)) C) = Fwd , Exit swap‚ãÜ ((v‚ÇÇ , v‚ÇÅ) , (av‚ÇÇ , av‚ÇÅ)) C
ap (Enter assocl‚ãÜ ((v‚ÇÅ , (v‚ÇÇ , v‚ÇÉ)) , (av‚ÇÅ , (av‚ÇÇ , av‚ÇÉ))) C) = Fwd , Exit assocl‚ãÜ (((v‚ÇÅ , v‚ÇÇ) , v‚ÇÉ) , ((av‚ÇÅ , av‚ÇÇ) , av‚ÇÉ)) C
ap (Enter assocr‚ãÜ (((v‚ÇÅ , v‚ÇÇ) , v‚ÇÉ) , ((av‚ÇÅ , av‚ÇÇ) , av‚ÇÉ)) C) = Fwd , Exit assocr‚ãÜ ((v‚ÇÅ , (v‚ÇÇ , v‚ÇÉ)) , ((av‚ÇÅ , (av‚ÇÇ , av‚ÇÉ)))) C
ap (Enter absorbr ((v , _) , (av , _)) C) = Fwd , Exit absorbr (v , av) C
ap (Enter absorbl ((_ , v) , (_ , av)) C) = Fwd , Exit absorbl (v , av) C
ap (Enter factorzr (() , _) C)
ap (Enter factorzl (() , _) C)
ap (Enter dist ((inj‚ÇÅ v‚ÇÅ , v‚ÇÉ) , (av‚ÇÅ , av‚ÇÉ)) C) = Fwd , Exit dist (inj‚ÇÅ (v‚ÇÅ , v‚ÇÉ) , (av‚ÇÅ , av‚ÇÉ)) C
ap (Enter dist ((inj‚ÇÇ v‚ÇÇ , v‚ÇÉ) , (av‚ÇÇ , av‚ÇÉ)) C) = Fwd , Exit dist (inj‚ÇÇ (v‚ÇÇ , v‚ÇÉ) , (av‚ÇÇ , av‚ÇÉ)) C
ap (Enter factor (inj‚ÇÅ (v‚ÇÅ , v‚ÇÉ) , av) C) = Fwd , Exit factor ((inj‚ÇÅ v‚ÇÅ , v‚ÇÉ) , av) C
ap (Enter factor (inj‚ÇÇ (v‚ÇÇ , v‚ÇÉ) , av) C) = Fwd , Exit factor ((inj‚ÇÇ v‚ÇÇ , v‚ÇÉ) , av) C
ap (Enter distl ((v‚ÇÉ , inj‚ÇÅ v‚ÇÅ) , (av‚ÇÉ , av‚ÇÅ)) C) = Fwd , Exit distl (inj‚ÇÅ (v‚ÇÉ , v‚ÇÅ) , (av‚ÇÉ , av‚ÇÅ)) C
ap (Enter distl ((v‚ÇÉ , inj‚ÇÇ v‚ÇÇ) , (av‚ÇÉ , av‚ÇÇ)) C) = Fwd , Exit distl (inj‚ÇÇ (v‚ÇÉ , v‚ÇÇ) , (av‚ÇÉ , av‚ÇÇ)) C
ap (Enter factorl (inj‚ÇÅ (v‚ÇÉ , v‚ÇÅ) , av) C) = Fwd , Exit factorl ((v‚ÇÉ , inj‚ÇÅ v‚ÇÅ) , av) C
ap (Enter factorl (inj‚ÇÇ (v‚ÇÉ , v‚ÇÇ) , av) C) = Fwd , Exit factorl ((v‚ÇÉ , inj‚ÇÇ v‚ÇÇ) , av) C
ap (Enter id‚ü∑ v C) = Fwd , Exit id‚ü∑ v C
ap (Enter (P‚ÇÅ ‚óé P‚ÇÇ) v C) = Fwd , Enter P‚ÇÅ v (Fst C P‚ÇÇ)
ap (Enter (P‚ÇÅ ‚äï P‚ÇÇ) (inj‚ÇÅ v‚ÇÅ , av‚ÇÅ) C) = Fwd , Enter P‚ÇÅ (v‚ÇÅ , av‚ÇÅ) (L+ C P‚ÇÇ)
ap (Enter (P‚ÇÅ ‚äï P‚ÇÇ) (inj‚ÇÇ v‚ÇÇ , av‚ÇÇ) C) = Fwd , Enter P‚ÇÇ (v‚ÇÇ , av‚ÇÇ) (R+ P‚ÇÅ C)
ap (Enter (P‚ÇÅ ‚äó P‚ÇÇ) ((v‚ÇÅ , v‚ÇÇ) , (av‚ÇÅ , av‚ÇÇ)) C) = Fwd , Enter P‚ÇÅ (v‚ÇÅ , av‚ÇÅ) (L√ó C P‚ÇÇ (v‚ÇÇ , av‚ÇÇ))
ap (Enter (Œ∑- P) (tt , av) C) = Fwd , Exit (Œ∑- P) ((tt , perm (+ 1) P idr‚óér) , (perm (+ 1) P idr‚óér , id‚áî)) C
ap (Enter (Œ∑+ P) (tt , av) C) = Fwd , Exit (Œ∑+ P) ((perm (+ 1) P idr‚óér , tt) , (id‚áî , perm (+ 1) P idr‚óér)) C
ap (Enter (Œµ+ P) ((perm i q Œ± , tt) , (Œ≤ , perm j r Œ≥)) C) =
   if (q ‚áî? r)
     then Fwd , Exit (Œµ+ P) (tt , refl) C
     else Bck , Enter (Œµ+ P) ((perm i q Œ± , tt) , (Œ≤ , perm j r Œ≥)) C
ap (Enter (Œµ- P) ((tt , perm i q Œ±) , (perm j r Œ≥ , Œ≤)) C) =
   if (q ‚áî? r)
     then Fwd , Exit (Œµ- P) (tt , refl) C
     else Bck , Enter (Œµ- P) (((tt , perm i q Œ±) , (perm j r Œ≥ , Œ≤))) C
ap (Exit P v Empty) = Done , Exit P v Empty
ap (Exit P‚ÇÅ v (Fst C P‚ÇÇ)) = Fwd , Enter P‚ÇÇ v (Snd P‚ÇÅ C) 
ap (Exit P‚ÇÇ v‚ÇÇ (Snd P‚ÇÅ C)) = Fwd , Exit (P‚ÇÅ ‚óé P‚ÇÇ) v‚ÇÇ C
ap (Exit P‚ÇÅ v‚ÇÅ (L√ó C P‚ÇÇ v‚ÇÇ)) = Fwd , Enter P‚ÇÇ v‚ÇÇ (R√ó P‚ÇÅ v‚ÇÅ C)
ap (Exit P‚ÇÇ (v‚ÇÇ , av‚ÇÇ) (R√ó P‚ÇÅ (v‚ÇÅ , av‚ÇÅ) C)) = Fwd , Exit (P‚ÇÅ ‚äó P‚ÇÇ) (((v‚ÇÅ , v‚ÇÇ) , (av‚ÇÅ , av‚ÇÇ))) C 
ap (Exit P‚ÇÅ (v‚ÇÅ , av) (L+ C P‚ÇÇ)) = Fwd , Exit (P‚ÇÅ ‚äï P‚ÇÇ) (inj‚ÇÅ v‚ÇÅ , av) C  
ap (Exit P‚ÇÇ (v‚ÇÇ , av) (R+ P‚ÇÅ C)) = Fwd , Exit (P‚ÇÅ ‚äï P‚ÇÇ) (inj‚ÇÇ v‚ÇÇ , av) C 

ap‚Åª¬π : {T : U} ‚Üí State T ‚Üí Dir √ó State T
ap‚Åª¬π (Enter P v Empty) = Done , Enter P v Empty
ap‚Åª¬π (Enter P‚ÇÅ v (Fst C P‚ÇÇ)) = Bck , Enter (P‚ÇÅ ‚óé P‚ÇÇ) v C 
ap‚Åª¬π (Enter P‚ÇÇ v‚ÇÇ (Snd P‚ÇÅ C)) = Bck , Exit P‚ÇÅ v‚ÇÇ (Fst C P‚ÇÇ)
ap‚Åª¬π (Enter P‚ÇÅ (v‚ÇÅ , av‚ÇÅ) (L√ó C P‚ÇÇ (v‚ÇÇ , av‚ÇÇ))) = Bck , Enter (P‚ÇÅ ‚äó P‚ÇÇ) (((v‚ÇÅ , v‚ÇÇ) , (av‚ÇÅ , av‚ÇÇ))) C 
ap‚Åª¬π (Enter P‚ÇÇ (v‚ÇÇ , av‚ÇÇ) (R√ó P‚ÇÅ (v‚ÇÅ , av‚ÇÅ) C)) = Bck , Exit P‚ÇÅ (v‚ÇÅ , av‚ÇÅ) (L√ó C P‚ÇÇ (v‚ÇÇ , av‚ÇÇ))
ap‚Åª¬π (Enter P‚ÇÅ (v‚ÇÅ , av) (L+ C P‚ÇÇ)) = Bck , Enter (P‚ÇÅ ‚äï P‚ÇÇ) (inj‚ÇÅ v‚ÇÅ , av) C  
ap‚Åª¬π (Enter P‚ÇÇ (v‚ÇÇ , av) (R+ P‚ÇÅ C)) = Bck , Enter (P‚ÇÅ ‚äï P‚ÇÇ) (inj‚ÇÇ v‚ÇÇ , av) C 
ap‚Åª¬π (Exit unite‚Çäl (v , av) C) = Bck , Enter unite‚Çäl (inj‚ÇÇ v , av) C
ap‚Åª¬π (Exit uniti‚Çäl (inj‚ÇÅ () , av) C)
ap‚Åª¬π (Exit uniti‚Çäl (inj‚ÇÇ v , av) C) = Bck , Enter uniti‚Çäl (v , av) C
ap‚Åª¬π (Exit unite‚Çär (v , av) C) = Bck , Enter unite‚Çär (inj‚ÇÅ v , av) C
ap‚Åª¬π (Exit uniti‚Çär (inj‚ÇÅ v , av) C) = Bck , Enter uniti‚Çär (v , av) C
ap‚Åª¬π (Exit uniti‚Çär (inj‚ÇÇ () , av) C)
ap‚Åª¬π (Exit swap‚Çä (inj‚ÇÅ v , av) C) = Bck , Enter swap‚Çä (inj‚ÇÇ v , av) C
ap‚Åª¬π (Exit swap‚Çä (inj‚ÇÇ v , av) C) = Bck , Enter swap‚Çä (inj‚ÇÅ v , av) C
ap‚Åª¬π (Exit assocl‚Çä (inj‚ÇÅ (inj‚ÇÅ v) , av) C) = Bck , Enter assocl‚Çä (inj‚ÇÅ v , av) C
ap‚Åª¬π (Exit assocl‚Çä (inj‚ÇÅ (inj‚ÇÇ v) , av) C) = Bck , Enter assocl‚Çä (inj‚ÇÇ (inj‚ÇÅ v) , av) C
ap‚Åª¬π (Exit assocl‚Çä (inj‚ÇÇ v , av) C) = Bck , Enter assocl‚Çä (inj‚ÇÇ (inj‚ÇÇ v) , av) C
ap‚Åª¬π (Exit assocr‚Çä (inj‚ÇÅ v , av) C) = Bck , Enter assocr‚Çä (inj‚ÇÅ (inj‚ÇÅ v) , av) C
ap‚Åª¬π (Exit assocr‚Çä (inj‚ÇÇ (inj‚ÇÅ v) , av) C) = Bck , Enter assocr‚Çä (inj‚ÇÅ (inj‚ÇÇ v) , av) C
ap‚Åª¬π (Exit assocr‚Çä (inj‚ÇÇ (inj‚ÇÇ v) , av) C) = Bck , Enter assocr‚Çä (inj‚ÇÇ v , av) C
ap‚Åª¬π (Exit uniti‚ãÜl ((tt , v) , (_ , av)) C) = Bck , Enter uniti‚ãÜl (v , av) C
ap‚Åª¬π (Exit unite‚ãÜl (v , av) C) = Bck , Enter unite‚ãÜl ((tt , v) , (refl , av)) C
ap‚Åª¬π (Exit uniti‚ãÜr ((v , tt) , (av , att)) C) = Bck , Enter uniti‚ãÜr (v , av) C
ap‚Åª¬π (Exit unite‚ãÜr (v , av) C) = Bck , Enter unite‚ãÜr ((v , tt) , (av , refl)) C
ap‚Åª¬π (Exit swap‚ãÜ ((v‚ÇÅ , v‚ÇÇ) , (av‚ÇÅ , av‚ÇÇ)) C) = Bck , Enter swap‚ãÜ ((v‚ÇÇ , v‚ÇÅ) , (av‚ÇÇ , av‚ÇÅ)) C
ap‚Åª¬π (Exit assocl‚ãÜ (((v‚ÇÅ , v‚ÇÇ) , v‚ÇÉ) , ((av‚ÇÅ , av‚ÇÇ) , av‚ÇÉ)) C) = Bck , Enter assocl‚ãÜ ((v‚ÇÅ , (v‚ÇÇ , v‚ÇÉ)) , ((av‚ÇÅ , (av‚ÇÇ , av‚ÇÉ)))) C
ap‚Åª¬π (Exit assocr‚ãÜ ((v‚ÇÅ , (v‚ÇÇ , v‚ÇÉ)) , ((av‚ÇÅ , (av‚ÇÇ , av‚ÇÉ)))) C) = Bck , Enter assocr‚ãÜ (((v‚ÇÅ , v‚ÇÇ) , v‚ÇÉ) , ((av‚ÇÅ , av‚ÇÇ) , av‚ÇÉ)) C
ap‚Åª¬π (Exit absorbr (() , _) C) 
ap‚Åª¬π (Exit absorbl (() , _) C)
ap‚Åª¬π (Exit factorzr ((_ , v) , (_ , av)) C) = Bck , Enter factorzr (v , av) C
ap‚Åª¬π (Exit factorzl ((v , _) , (av , _)) C) = Bck , Enter factorzl (v , av) C
ap‚Åª¬π (Exit dist (inj‚ÇÅ (v‚ÇÅ , v‚ÇÉ) , av) C) = Bck , Enter dist ((inj‚ÇÅ v‚ÇÅ , v‚ÇÉ) , av) C
ap‚Åª¬π (Exit dist (inj‚ÇÇ (v‚ÇÇ , v‚ÇÉ) , av) C) = Bck , Enter dist ((inj‚ÇÇ v‚ÇÇ , v‚ÇÉ) , av) C
ap‚Åª¬π (Exit factor ((inj‚ÇÅ v‚ÇÅ , v‚ÇÉ) , (av‚ÇÅ , av‚ÇÉ)) C) = Bck , Enter factor (inj‚ÇÅ (v‚ÇÅ , v‚ÇÉ) , (av‚ÇÅ , av‚ÇÉ)) C
ap‚Åª¬π (Exit factor ((inj‚ÇÇ v‚ÇÇ , v‚ÇÉ) , (av‚ÇÇ , av‚ÇÉ)) C) = Bck , Enter factor (inj‚ÇÇ (v‚ÇÇ , v‚ÇÉ) , (av‚ÇÇ , av‚ÇÉ)) C
ap‚Åª¬π (Exit distl (inj‚ÇÅ (v‚ÇÉ , v‚ÇÅ) , av) C) = Bck , Enter distl ((v‚ÇÉ , inj‚ÇÅ v‚ÇÅ) , av) C
ap‚Åª¬π (Exit distl (inj‚ÇÇ (v‚ÇÉ , v‚ÇÇ) , av) C) = Bck , Enter distl ((v‚ÇÉ , inj‚ÇÇ v‚ÇÇ) , av) C
ap‚Åª¬π (Exit factorl ((v‚ÇÉ , inj‚ÇÅ v‚ÇÅ) , (av‚ÇÉ , av‚ÇÅ)) C) = Bck , Enter factorl (inj‚ÇÅ (v‚ÇÉ , v‚ÇÅ) , (av‚ÇÉ , av‚ÇÅ)) C
ap‚Åª¬π (Exit factorl ((v‚ÇÉ , inj‚ÇÇ v‚ÇÇ) , (av‚ÇÉ , av‚ÇÇ)) C) = Bck , Enter factorl (inj‚ÇÇ (v‚ÇÉ , v‚ÇÇ) , (av‚ÇÉ , av‚ÇÇ)) C
ap‚Åª¬π (Exit id‚ü∑ v C) = Bck , Enter id‚ü∑ v C
ap‚Åª¬π (Exit (P‚ÇÅ ‚óé P‚ÇÇ) v C) = Bck , Exit P‚ÇÇ v (Snd P‚ÇÅ C)
ap‚Åª¬π (Exit (P‚ÇÅ ‚äï P‚ÇÇ) (inj‚ÇÅ v‚ÇÅ , av) C) = Bck , Exit P‚ÇÅ (v‚ÇÅ , av) (L+ C P‚ÇÇ) 
ap‚Åª¬π (Exit (P‚ÇÅ ‚äï P‚ÇÇ) (inj‚ÇÇ v‚ÇÇ , av) C) = Bck , Exit P‚ÇÇ (v‚ÇÇ , av) (R+ P‚ÇÅ C) 
ap‚Åª¬π (Exit (P‚ÇÅ ‚äó P‚ÇÇ) ((v‚ÇÅ , v‚ÇÇ) , (av‚ÇÅ , av‚ÇÇ)) C) = Bck , Exit P‚ÇÇ (v‚ÇÇ , av‚ÇÇ) (R√ó P‚ÇÅ (v‚ÇÅ , av‚ÇÅ) C)
ap‚Åª¬π (Exit (Œ∑- P) ((tt , perm i q Œ±) , (perm j r Œ≥ , Œ≤)) C) =
     if (q ‚áî? r)
        then Bck , Enter (Œ∑- P) (tt , refl) C
        else Fwd , Exit (Œ∑- P)
                        ( (tt , (perm (‚Ñ§suc i) (P ‚óé q)
                                      (trans‚áî (id‚áî ‚ä° Œ±)
                                              (trans‚áî (idr‚óér ‚ä° id‚áî)
                                                      (2! (lower {p = P} (+ 1) i))))))
                        , ((perm (‚Ñ§suc i) (P ‚óé q)
                                      (trans‚áî (id‚áî ‚ä° Œ±)
                                              (trans‚áî (idr‚óér ‚ä° id‚áî)
                                                      (2! (lower {p = P} (+ 1) i))))) , id‚áî)) C
ap‚Åª¬π (Exit (Œ∑+ P) ((perm i q Œ± , tt) , (Œ≤ , perm j r Œ≥)) C) =
     if (q ‚áî? r)
        then Bck , Enter (Œ∑+ P) (tt , refl) C
        else Fwd , Exit (Œ∑+ P)
                        ( ((perm (‚Ñ§suc i) (P ‚óé q)
                                 (trans‚áî (id‚áî ‚ä° Œ±)
                                         (trans‚áî (idr‚óér ‚ä° id‚áî)
                                                 (2! (lower {p = P} (+ 1) i))))) , tt)
                        , (id‚áî , (perm (‚Ñ§suc i) (P ‚óé q)
                                       (trans‚áî (id‚áî ‚ä° Œ±)
                                               (trans‚áî (idr‚óér ‚ä° id‚áî)
                                                       (2! (lower {p = P} (+ 1) i))))))) C
ap‚Åª¬π (Exit (Œµ+ P) (tt , _) C) = Bck , Enter (Œµ+ P) ((((perm (+ 1) P idr‚óér) , tt)) , (id‚áî , (perm (+ 1) P idr‚óér))) C
ap‚Åª¬π (Exit (Œµ- P) (tt , _) C) = Bck , Enter (Œµ- P) (((tt , (perm (+ 1) P idr‚óér))) , ((perm (+ 1) P idr‚óér) , id‚áî)) C

{-# NON_TERMINATING #-}
mutual 
  loopFwd : {T : U} ‚Üí State T ‚Üí V T
  loopFwd s with ap s
  ... | Fwd , s' = loopFwd s'
  ... | Bck , s' = loopBck s'
  ... | Done , Exit _ v Empty = v
  ... | Done , _ = {!!}

  loopBck : {T : U} ‚Üí State T ‚Üí V T
  loopBck s with ap‚Åª¬π s
  ... | Bck , s' = loopBck s'
  ... | Fwd , s' = loopFwd s'
  ... | Done , _ = {!!}

-- Credit card example

cc : # NOT ‚ü∑ # NOT
cc = uniti‚ãÜl ‚óé
     (((Œ∑+ NOT) ‚äó id‚ü∑) ‚óé
     ((assocr‚ãÜ ‚óé
     ((id‚ü∑ ‚äó swap‚ãÜ) ‚óé
     ((id‚ü∑ ‚äó (Œµ+ NOT)) ‚óé
     unite‚ãÜr)))))

{-
%% -- Trivial implementation of eta/epsilon that does
%% -- type check (see below).  Might be interesting to figure out why
%% -- that is:
%% -- ap/ (Œ∑ {œÑ} {p}) (v , av) =
%% --   (((+ 0) , (p , id‚áî)) , tt) , (id‚áî , ((+ 0) , (p , id‚áî)))
%% -- ap/ Œµ (v , av) = tt , refl
-}
