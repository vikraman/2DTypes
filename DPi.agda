{-# OPTIONS --without-K #-}

-- Dependent Pi; want Œ£ and Œ† types

module DPi where

open import Data.Empty
open import Data.Unit
open import Data.Sum
open import Data.Product
open import Relation.Binary.PropositionalEquality

infix  30 _‚ü∑_
infixr 50 _‚óé_

------------------------------------------------------------------------------
data U : Set
El : U ‚Üí Set

data U where
  ZERO  : U
  ONE   : U
  PLUS  : U ‚Üí U ‚Üí U
  TIMES : U ‚Üí U ‚Üí U
  SIGMA : (A : U) ‚Üí (El A ‚Üí U) ‚Üí U
  PI    : (A : U) ‚Üí (El A ‚Üí U) ‚Üí U
  EQ    : {A : U} ‚Üí (a b : El A) ‚Üí U

El ZERO        = ‚ä•
El ONE         = ‚ä§
El (PLUS A B)  = El A ‚äé El B
El (TIMES A B) = El A √ó El B
El (SIGMA A P) = Œ£[ v ‚àà El A ] El (P v)
El (PI A P)    = (v : El A) ‚Üí El (P v)
El (EQ a b)    = a ‚â° b

-- Examples

`ùüö : U
`ùüö = PLUS ONE ONE

false true : El `ùüö
false = inj‚ÇÅ tt
true = inj‚ÇÇ tt

`A : U
`A = SIGMA `ùüö (Œª b ‚Üí EQ {`ùüö} b false)

a b : El `A
a = false , refl
b = true , {!!} -- empty

`B : U
`B = PI `ùüö (Œª b ‚Üí EQ {`ùüö} b false)

c : El `B
c (inj‚ÇÅ _) = refl
c (inj‚ÇÇ _) = {!!} -- empty

-- University algebra (Altenkirch)

data _‚ü∑_ : U ‚Üí U ‚Üí Set where
  -- All isomorphisms between finite types
  unite‚Çäl : {t : U} ‚Üí PLUS ZERO t ‚ü∑ t
  uniti‚Çäl : {t : U} ‚Üí t ‚ü∑ PLUS ZERO t
  unite‚Çär : {t : U} ‚Üí PLUS t ZERO ‚ü∑ t
  uniti‚Çär : {t : U} ‚Üí t ‚ü∑ PLUS t ZERO
  swap‚Çä   : {t‚ÇÅ t‚ÇÇ : U} ‚Üí PLUS t‚ÇÅ t‚ÇÇ ‚ü∑ PLUS t‚ÇÇ t‚ÇÅ
  assocl‚Çä : {t‚ÇÅ t‚ÇÇ t‚ÇÉ : U} ‚Üí PLUS t‚ÇÅ (PLUS t‚ÇÇ t‚ÇÉ) ‚ü∑ PLUS (PLUS t‚ÇÅ t‚ÇÇ) t‚ÇÉ
  assocr‚Çä : {t‚ÇÅ t‚ÇÇ t‚ÇÉ : U} ‚Üí PLUS (PLUS t‚ÇÅ t‚ÇÇ) t‚ÇÉ ‚ü∑ PLUS t‚ÇÅ (PLUS t‚ÇÇ t‚ÇÉ)
  unite‚ãÜl  : {t : U} ‚Üí TIMES ONE t ‚ü∑ t
  uniti‚ãÜl  : {t : U} ‚Üí t ‚ü∑ TIMES ONE t
  unite‚ãÜr : {t : U} ‚Üí TIMES t ONE ‚ü∑ t
  uniti‚ãÜr : {t : U} ‚Üí t ‚ü∑ TIMES t ONE
  swap‚ãÜ   : {t‚ÇÅ t‚ÇÇ : U} ‚Üí TIMES t‚ÇÅ t‚ÇÇ ‚ü∑ TIMES t‚ÇÇ t‚ÇÅ
  assocl‚ãÜ : {t‚ÇÅ t‚ÇÇ t‚ÇÉ : U} ‚Üí TIMES t‚ÇÅ (TIMES t‚ÇÇ t‚ÇÉ) ‚ü∑ TIMES (TIMES t‚ÇÅ t‚ÇÇ) t‚ÇÉ
  assocr‚ãÜ : {t‚ÇÅ t‚ÇÇ t‚ÇÉ : U} ‚Üí TIMES (TIMES t‚ÇÅ t‚ÇÇ) t‚ÇÉ ‚ü∑ TIMES t‚ÇÅ (TIMES t‚ÇÇ t‚ÇÉ)
  absorbr : {t : U} ‚Üí TIMES ZERO t ‚ü∑ ZERO
  absorbl : {t : U} ‚Üí TIMES t ZERO ‚ü∑ ZERO
  factorzr : {t : U} ‚Üí ZERO ‚ü∑ TIMES t ZERO
  factorzl : {t : U} ‚Üí ZERO ‚ü∑ TIMES ZERO t
  dist    : {t‚ÇÅ t‚ÇÇ t‚ÇÉ : U} ‚Üí
            TIMES (PLUS t‚ÇÅ t‚ÇÇ) t‚ÇÉ ‚ü∑ PLUS (TIMES t‚ÇÅ t‚ÇÉ) (TIMES t‚ÇÇ t‚ÇÉ)
  factor  : {t‚ÇÅ t‚ÇÇ t‚ÇÉ : U} ‚Üí
            PLUS (TIMES t‚ÇÅ t‚ÇÉ) (TIMES t‚ÇÇ t‚ÇÉ) ‚ü∑ TIMES (PLUS t‚ÇÅ t‚ÇÇ) t‚ÇÉ
  distl   : {t‚ÇÅ t‚ÇÇ t‚ÇÉ : U } ‚Üí
            TIMES t‚ÇÅ (PLUS t‚ÇÇ t‚ÇÉ) ‚ü∑ PLUS (TIMES t‚ÇÅ t‚ÇÇ) (TIMES t‚ÇÅ t‚ÇÉ)
  factorl : {t‚ÇÅ t‚ÇÇ t‚ÇÉ : U } ‚Üí
            PLUS (TIMES t‚ÇÅ t‚ÇÇ) (TIMES t‚ÇÅ t‚ÇÉ) ‚ü∑ TIMES t‚ÇÅ (PLUS t‚ÇÇ t‚ÇÉ)
  id‚ü∑    : {t : U} ‚Üí t ‚ü∑ t
  _‚óé_     : {t‚ÇÅ t‚ÇÇ t‚ÇÉ : U} ‚Üí (t‚ÇÅ ‚ü∑ t‚ÇÇ) ‚Üí (t‚ÇÇ ‚ü∑ t‚ÇÉ) ‚Üí (t‚ÇÅ ‚ü∑ t‚ÇÉ)
  _‚äï_     : {t‚ÇÅ t‚ÇÇ t‚ÇÉ t‚ÇÑ : U} ‚Üí
            (t‚ÇÅ ‚ü∑ t‚ÇÉ) ‚Üí (t‚ÇÇ ‚ü∑ t‚ÇÑ) ‚Üí (PLUS t‚ÇÅ t‚ÇÇ ‚ü∑ PLUS t‚ÇÉ t‚ÇÑ)
  _‚äó_     : {t‚ÇÅ t‚ÇÇ t‚ÇÉ t‚ÇÑ : U} ‚Üí
            (t‚ÇÅ ‚ü∑ t‚ÇÉ) ‚Üí (t‚ÇÇ ‚ü∑ t‚ÇÑ) ‚Üí (TIMES t‚ÇÅ t‚ÇÇ ‚ü∑ TIMES t‚ÇÉ t‚ÇÑ)
  -- New isomorphisms
  PI1 : {P : ‚ä§ ‚Üí U} ‚Üí PI ONE P ‚ü∑ P tt
  SIGMA1 : {P : ‚ä§ ‚Üí U} ‚Üí SIGMA ONE P ‚ü∑ P tt
  PIPLUS : {A B : U} {P : El A ‚äé El B ‚Üí U} ‚Üí
           PI (PLUS A B) P ‚ü∑ TIMES (PI A (Œª a ‚Üí P (inj‚ÇÅ a)))
                                    (PI B (Œª b ‚Üí (P (inj‚ÇÇ b))))


------------------------------------------------------------------------------
{--
data U where
  ZERO  : U
  ONE   : U
  PLUS  : U ‚Üí U ‚Üí U
  TIMES : U ‚Üí U ‚Üí U
  SIGMA : (A : U) ‚Üí (El A ‚Üí U) ‚Üí U
  PI    : (A : U) ‚Üí (El A ‚Üí U) ‚Üí U
  EQ    : {A : U} ‚Üí (a b : El A) ‚Üí U
--}
