{-# OPTIONS --without-K #-}

-- Dependent Pi; want Œ£ and Œ† types

module DPi where

open import Data.Empty
open import Data.Unit hiding (_‚âü_)
open import Data.Sum hiding (map)
open import Data.Product hiding (map)
open import Data.Nat hiding (_‚âü_)
open import Data.List
open import Relation.Nullary
open import Relation.Binary
open import Function
open import Relation.Binary.PropositionalEquality

infix  30 _‚ü∑_
infixr 50 _‚óé_

------------------------------------------------------------------------------
data U : Set
El : U ‚Üí Set

data U where
  ZERO  : U
  ONE   : U
  PLUS  : U ‚Üí U ‚Üí U
  TIMES : U ‚Üí U ‚Üí U
  SIGMA : (A : U) ‚Üí (El A ‚Üí U) ‚Üí U
  PI    : (A : U) ‚Üí (El A ‚Üí U) ‚Üí U
  EQ    : {A : U} ‚Üí (a b : El A) ‚Üí U

El ZERO        = ‚ä•
El ONE         = ‚ä§
El (PLUS A B)  = El A ‚äé El B
El (TIMES A B) = El A √ó El B
El (SIGMA A P) = Œ£[ v ‚àà El A ] El (P v)
El (PI A P)    = (v : El A) ‚Üí El (P v)
El (EQ a b)    = a ‚â° b

inj‚ÇÅlem : {A B : Set} {x y : A} ‚Üí _‚â°_ {A = A ‚äé B} (inj‚ÇÅ x) (inj‚ÇÅ y) ‚Üí x ‚â° y
inj‚ÇÅlem refl = refl

_‚âü_ : {A : U} ‚Üí Decidable {A = El A} _‚â°_
_‚âü_ {ZERO} ()
_‚âü_ {ONE} tt tt = yes refl
_‚âü_ {PLUS A B} (inj‚ÇÅ x) (inj‚ÇÅ y) with _‚âü_ {A} x y
_‚âü_ {PLUS A B} (inj‚ÇÅ x) (inj‚ÇÅ .x) | yes refl = yes refl
... | no ¬¨p = no (¬¨p ‚àò inj‚ÇÅlem)
_‚âü_ {PLUS A B} (inj‚ÇÅ x) (inj‚ÇÇ y) = {!!}
_‚âü_ {PLUS A B} (inj‚ÇÇ x) (inj‚ÇÅ y) = {!!}
_‚âü_ {PLUS A B} (inj‚ÇÇ x) (inj‚ÇÇ y) = {!!}
_‚âü_ {TIMES A B} (x , y) (z , w) with _‚âü_ {A} x z | _‚âü_ {B} y w
_‚âü_ {TIMES A B} (x , y) (.x , .y) | yes refl | yes refl = yes refl
_‚âü_ {TIMES A B} (x , y) (z , w) | no ¬¨p | yes p = {!!}
_‚âü_ {TIMES A B} (x , y) (z , w) | yes p | no ¬¨p = {!!}
_‚âü_ {TIMES A B} (x , y) (z , w) | no ¬¨p | no ¬¨q = {!!}
_‚âü_ {SIGMA A P} a b = {!!}
_‚âü_ {PI A P} a b = {!!}
_‚âü_ {EQ a b} c d = {!!}

-- Questions:
-- Should enum and ‚à£_‚à£ map to a flat result or a family of results indexed by a value?

-- Enum: can tighten to a Vector later

enum : (A : U) ‚Üí List (El A)
enum ZERO = []
enum ONE = tt ‚à∑ []
enum (PLUS A B) = map inj‚ÇÅ (enum A) ++ map inj‚ÇÇ (enum B)
enum (TIMES A B) = concat (map (Œª b ‚Üí map (Œª a ‚Üí (a , b)) (enum A)) (enum B))
enum (SIGMA A P) = {!!} -- concat (map (Œª a ‚Üí enum (P a)) (enum A))
enum (PI A P) = {!!}
enum (EQ {A} a b) with _‚âü_ {A} a b
enum (EQ a .a) | yes refl = refl ‚à∑ []
... | no _ = []

-- Size

‚à£_‚à£ : U ‚Üí ‚Ñï
‚à£ ZERO ‚à£ = 0
‚à£ ONE ‚à£ = 1
‚à£ PLUS A B ‚à£ = ‚à£ A ‚à£ + ‚à£ B ‚à£
‚à£ TIMES A B ‚à£ = ‚à£ A ‚à£ * ‚à£ B ‚à£
‚à£ SIGMA A P ‚à£ = sum (map (Œª a ‚Üí ‚à£ P a ‚à£) (enum A))
‚à£ PI A P ‚à£ = {!!}
‚à£ EQ {A} a b ‚à£ with _‚âü_ {A} a b
... | yes _ = 1
... | no _ = 0

-- Examples

`ùüö : U
`ùüö = PLUS ONE ONE

false true : El `ùüö
false = inj‚ÇÅ tt
true = inj‚ÇÇ tt

`A : U
`A = SIGMA `ùüö (Œª b ‚Üí EQ {`ùüö} b false)

a b : El `A
a = false , refl
b = true , {!!} -- empty

`B : U
`B = PI `ùüö (Œª b ‚Üí EQ {`ùüö} b false)

c : El `B
c (inj‚ÇÅ _) = refl
c (inj‚ÇÇ _) = {!!} -- empty

-- University algebra (Altenkirch)

-- Lose TIMES but first make sure that all isomorphisms involving TIMES can be
-- expressed with SIGMA

data _‚ü∑_ : U ‚Üí U ‚Üí Set where
  -- All isomorphisms between finite types
  unite‚Çäl : {t : U} ‚Üí PLUS ZERO t ‚ü∑ t
  uniti‚Çäl : {t : U} ‚Üí t ‚ü∑ PLUS ZERO t
  unite‚Çär : {t : U} ‚Üí PLUS t ZERO ‚ü∑ t
  uniti‚Çär : {t : U} ‚Üí t ‚ü∑ PLUS t ZERO
  swap‚Çä   : {t‚ÇÅ t‚ÇÇ : U} ‚Üí PLUS t‚ÇÅ t‚ÇÇ ‚ü∑ PLUS t‚ÇÇ t‚ÇÅ
  assocl‚Çä : {t‚ÇÅ t‚ÇÇ t‚ÇÉ : U} ‚Üí PLUS t‚ÇÅ (PLUS t‚ÇÇ t‚ÇÉ) ‚ü∑ PLUS (PLUS t‚ÇÅ t‚ÇÇ) t‚ÇÉ
  assocr‚Çä : {t‚ÇÅ t‚ÇÇ t‚ÇÉ : U} ‚Üí PLUS (PLUS t‚ÇÅ t‚ÇÇ) t‚ÇÉ ‚ü∑ PLUS t‚ÇÅ (PLUS t‚ÇÇ t‚ÇÉ)
  unite‚ãÜl  : {t : U} ‚Üí TIMES ONE t ‚ü∑ t
  uniti‚ãÜl  : {t : U} ‚Üí t ‚ü∑ TIMES ONE t
  unite‚ãÜr : {t : U} ‚Üí TIMES t ONE ‚ü∑ t
  uniti‚ãÜr : {t : U} ‚Üí t ‚ü∑ TIMES t ONE
  swap‚ãÜ   : {t‚ÇÅ t‚ÇÇ : U} ‚Üí TIMES t‚ÇÅ t‚ÇÇ ‚ü∑ TIMES t‚ÇÇ t‚ÇÅ
  assocl‚ãÜ : {t‚ÇÅ t‚ÇÇ t‚ÇÉ : U} ‚Üí TIMES t‚ÇÅ (TIMES t‚ÇÇ t‚ÇÉ) ‚ü∑ TIMES (TIMES t‚ÇÅ t‚ÇÇ) t‚ÇÉ
  assocr‚ãÜ : {t‚ÇÅ t‚ÇÇ t‚ÇÉ : U} ‚Üí TIMES (TIMES t‚ÇÅ t‚ÇÇ) t‚ÇÉ ‚ü∑ TIMES t‚ÇÅ (TIMES t‚ÇÇ t‚ÇÉ)
  absorbr : {t : U} ‚Üí TIMES ZERO t ‚ü∑ ZERO
  absorbl : {t : U} ‚Üí TIMES t ZERO ‚ü∑ ZERO
  factorzr : {t : U} ‚Üí ZERO ‚ü∑ TIMES t ZERO
  factorzl : {t : U} ‚Üí ZERO ‚ü∑ TIMES ZERO t
  dist    : {t‚ÇÅ t‚ÇÇ t‚ÇÉ : U} ‚Üí
            TIMES (PLUS t‚ÇÅ t‚ÇÇ) t‚ÇÉ ‚ü∑ PLUS (TIMES t‚ÇÅ t‚ÇÉ) (TIMES t‚ÇÇ t‚ÇÉ)
  factor  : {t‚ÇÅ t‚ÇÇ t‚ÇÉ : U} ‚Üí
            PLUS (TIMES t‚ÇÅ t‚ÇÉ) (TIMES t‚ÇÇ t‚ÇÉ) ‚ü∑ TIMES (PLUS t‚ÇÅ t‚ÇÇ) t‚ÇÉ
  distl   : {t‚ÇÅ t‚ÇÇ t‚ÇÉ : U } ‚Üí
            TIMES t‚ÇÅ (PLUS t‚ÇÇ t‚ÇÉ) ‚ü∑ PLUS (TIMES t‚ÇÅ t‚ÇÇ) (TIMES t‚ÇÅ t‚ÇÉ)
  factorl : {t‚ÇÅ t‚ÇÇ t‚ÇÉ : U } ‚Üí
            PLUS (TIMES t‚ÇÅ t‚ÇÇ) (TIMES t‚ÇÅ t‚ÇÉ) ‚ü∑ TIMES t‚ÇÅ (PLUS t‚ÇÇ t‚ÇÉ)
  id‚ü∑    : {t : U} ‚Üí t ‚ü∑ t
  _‚óé_     : {t‚ÇÅ t‚ÇÇ t‚ÇÉ : U} ‚Üí (t‚ÇÅ ‚ü∑ t‚ÇÇ) ‚Üí (t‚ÇÇ ‚ü∑ t‚ÇÉ) ‚Üí (t‚ÇÅ ‚ü∑ t‚ÇÉ)
  _‚äï_     : {t‚ÇÅ t‚ÇÇ t‚ÇÉ t‚ÇÑ : U} ‚Üí
            (t‚ÇÅ ‚ü∑ t‚ÇÉ) ‚Üí (t‚ÇÇ ‚ü∑ t‚ÇÑ) ‚Üí (PLUS t‚ÇÅ t‚ÇÇ ‚ü∑ PLUS t‚ÇÉ t‚ÇÑ)
  _‚äó_     : {t‚ÇÅ t‚ÇÇ t‚ÇÉ t‚ÇÑ : U} ‚Üí
            (t‚ÇÅ ‚ü∑ t‚ÇÉ) ‚Üí (t‚ÇÇ ‚ü∑ t‚ÇÑ) ‚Üí (TIMES t‚ÇÅ t‚ÇÇ ‚ü∑ TIMES t‚ÇÉ t‚ÇÑ)
  -- New isomorphisms
  PI1 : {P : ‚ä§ ‚Üí U} ‚Üí PI ONE P ‚ü∑ P tt
  SIGMA1 : {P : ‚ä§ ‚Üí U} ‚Üí SIGMA ONE P ‚ü∑ P tt
  PIPLUS : {A B : U} {P : El A ‚äé El B ‚Üí U} ‚Üí
           PI (PLUS A B) P ‚ü∑ TIMES (PI A (Œª a ‚Üí P (inj‚ÇÅ a)))
                                    (PI B (Œª b ‚Üí (P (inj‚ÇÇ b))))


------------------------------------------------------------------------------
{--
data U where
  ZERO  : U
  ONE   : U
  PLUS  : U ‚Üí U ‚Üí U
  TIMES : U ‚Üí U ‚Üí U
  SIGMA : (A : U) ‚Üí (El A ‚Üí U) ‚Üí U
  PI    : (A : U) ‚Üí (El A ‚Üí U) ‚Üí U
  EQ    : {A : U} ‚Üí (a b : El A) ‚Üí U
--}
