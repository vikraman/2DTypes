{-# OPTIONS --without-K #-}

module PiFin.Level0 where

open import Type using (Type; Type‚ÇÄ; Type‚ÇÅ)
open import Zero using (ùüò)
open import One
open import Coproduct
open import DependentSum using (Œ£; _√ó_; _,_; p‚ÇÅ)
open import NaturalNumbers
open import Functions using (_‚àò_; id)
open import Equivalences using (_‚âÉ_; !e; _‚óè_; qinv-is-equiv; hae-is-qinv; path-to-eqv; ide)

open import Paths using (_==_; refl; _‚óæ_; ap)
open import PathsInSigma using (pair=; dpair=)
open import Univalence using (ua; ua-Œ≤; ua-ide)
open import PropositionalTruncation using (‚à•_‚à•; ‚à£_‚à£; recTrunc; identify)

open import PiFin.EmbeddingsInUniverse using (module UnivalentUniverseOfFiniteTypes)
open UnivalentUniverseOfFiniteTypes

open import PiFin.Syntax

{-

In the model, we have triples: a type T, a size n , and some proof-irrelevant evidence that the size of T is n (specifically, T is equivalent to a flat type of size n)

From U to M:
  We have a structured type A which we map to
  (the denotation of A, the size of A, the truncation of the path from A to its flat form via normalize)

From M to U:
  The only thing we can examine is the size component, so we simply produce fromSize n

U->M->U: we're guaranteed by normalizeC that the flat type and the original are equivalent

M->U->M:
try to make a path between
(X, m, |p|) -> A_m -> (‚ü¶A_m‚üß, m, |q|)
Can't do it between X and A_m, but we can do it from |p| to |q|
X = El m = Am \to X = Am, by size-el n


Level 1
Pi to M: From A <-> B, translate to A \eq B, which induces a path on the triple
M to Pi: Have some path between triples (X, n, |p|) and (Y, m, |q|). By dpair=-e\_1, X == Y.
By induction on |p| and |q|, we get a path El m == El n, which from classical math can be converted to a combinator.


-}

-- The model is the subuniverse of finite types
M : Type‚ÇÅ
M = Œ£ Type‚ÇÄ is-finite

-- Computes the number of canonical inhabitants of a finite type
size : U ‚Üí ‚Ñï
size ZERO = 0
size ONE  = 1
size (PLUS  t‚ÇÅ t‚ÇÇ) = add (size t‚ÇÅ) (size t‚ÇÇ)
size (TIMES t‚ÇÅ t‚ÇÇ) = mult (size t‚ÇÅ) (size t‚ÇÇ)

canonicalU : U ‚Üí U
canonicalU = fromSize ‚àò size

size+ : (n‚ÇÅ n‚ÇÇ : ‚Ñï) ‚Üí PLUS (fromSize n‚ÇÅ) (fromSize n‚ÇÇ) ‚ü∑ fromSize (add n‚ÇÅ n‚ÇÇ)
size+ 0         n‚ÇÇ = unite‚Çäl
size+ (succ n‚ÇÅ) n‚ÇÇ = assocr‚Çä ‚óé (id‚ü∑ ‚äï size+ n‚ÇÅ n‚ÇÇ)

size* : (n‚ÇÅ n‚ÇÇ : ‚Ñï) ‚Üí TIMES (fromSize n‚ÇÅ) (fromSize n‚ÇÇ) ‚ü∑ fromSize (mult n‚ÇÅ n‚ÇÇ)
size* 0         n‚ÇÇ = absorbr
size* (succ n‚ÇÅ) n‚ÇÇ = dist ‚óé ((unite‚ãÜl ‚äï size* n‚ÇÅ n‚ÇÇ) ‚óé size+ n‚ÇÇ (mult n‚ÇÅ n‚ÇÇ))

-- Computes an isomorphism between a finite type and its canonical form
normalizeC : (t : U) ‚Üí t ‚ü∑ canonicalU t
normalizeC ZERO = id‚ü∑
normalizeC ONE  = uniti‚Çäl ‚óé swap‚Çä
normalizeC (PLUS t‚ÇÄ t‚ÇÅ) =
  (normalizeC t‚ÇÄ ‚äï normalizeC t‚ÇÅ) ‚óé size+ (size t‚ÇÄ) (size t‚ÇÅ)
normalizeC (TIMES t‚ÇÄ t‚ÇÅ) =
  (normalizeC t‚ÇÄ ‚äó normalizeC t‚ÇÅ) ‚óé size* (size t‚ÇÄ) (size t‚ÇÅ)

#‚ü¶_‚üß‚ÇÄ : U ‚Üí Type‚ÇÄ
#‚ü¶ ZERO ‚üß‚ÇÄ        = ùüò
#‚ü¶ ONE  ‚üß‚ÇÄ        = ùüô
#‚ü¶ PLUS  t‚ÇÅ t‚ÇÇ ‚üß‚ÇÄ = #‚ü¶ t‚ÇÅ ‚üß‚ÇÄ + #‚ü¶ t‚ÇÇ ‚üß‚ÇÄ
#‚ü¶ TIMES t‚ÇÅ t‚ÇÇ ‚üß‚ÇÄ = #‚ü¶ t‚ÇÅ ‚üß‚ÇÄ √ó #‚ü¶ t‚ÇÇ ‚üß‚ÇÄ

size-el : (n : ‚Ñï) ‚Üí #‚ü¶ fromSize n ‚üß‚ÇÄ == El n
size-el = ind‚Ñï _ (refl ùüò) (Œª _ ‚Üí ap (_+_ ùüô))

#‚ü¶_‚üß‚ÇÅ : {X Y : U} ‚Üí X ‚ü∑ Y ‚Üí #‚ü¶ X ‚üß‚ÇÄ ‚âÉ #‚ü¶ Y ‚üß‚ÇÄ
#‚ü¶ id‚ü∑ ‚üß‚ÇÅ = ide _
#‚ü¶ unite‚Çäl ‚üß‚ÇÅ = (Œª { (i‚ÇÅ ()); (i‚ÇÇ x) ‚Üí x }) ,
  qinv-is-equiv (i‚ÇÇ , (Œª { (i‚ÇÅ ()); x@(i‚ÇÇ _) ‚Üí refl x }) , refl)
#‚ü¶ swap‚Çä ‚üß‚ÇÅ = (Œª { (i‚ÇÅ x) ‚Üí i‚ÇÇ x; (i‚ÇÇ x) ‚Üí i‚ÇÅ x }) ,
  qinv-is-equiv ((Œª { (i‚ÇÅ x) ‚Üí i‚ÇÇ x; (i‚ÇÇ x) ‚Üí i‚ÇÅ x }) ,
    (Œª { x@(i‚ÇÅ _) ‚Üí refl x; x@(i‚ÇÇ _) ‚Üí refl x }) ,
    (Œª { x@(i‚ÇÅ _) ‚Üí refl x; x@(i‚ÇÇ _) ‚Üí refl x }))
#‚ü¶ assocl‚Çä ‚üß‚ÇÅ = (Œª { (i‚ÇÅ x) ‚Üí i‚ÇÅ (i‚ÇÅ x); (i‚ÇÇ (i‚ÇÅ x)) ‚Üí i‚ÇÅ (i‚ÇÇ x); (i‚ÇÇ (i‚ÇÇ x)) ‚Üí i‚ÇÇ x }) ,
  qinv-is-equiv ((Œª { (i‚ÇÅ (i‚ÇÅ x)) ‚Üí i‚ÇÅ x; (i‚ÇÅ (i‚ÇÇ x)) ‚Üí i‚ÇÇ (i‚ÇÅ x); (i‚ÇÇ x) ‚Üí i‚ÇÇ (i‚ÇÇ x) }) ,
    (Œª { x@(i‚ÇÅ _) ‚Üí refl x; x@(i‚ÇÇ (i‚ÇÅ _)) ‚Üí refl x; x@(i‚ÇÇ (i‚ÇÇ _)) ‚Üí refl x }) ,
    (Œª { x@(i‚ÇÅ (i‚ÇÅ _)) ‚Üí refl x; x@(i‚ÇÅ (i‚ÇÇ _)) ‚Üí refl x; x@(i‚ÇÇ _) ‚Üí refl x }))
#‚ü¶ unite‚ãÜl ‚üß‚ÇÅ = (Œª { (_ , x) ‚Üí x }) ,
  qinv-is-equiv ((Œª x ‚Üí (0‚ÇÅ , x)) , (Œª { x@(0‚ÇÅ , _) ‚Üí refl x }) , refl)
#‚ü¶ swap‚ãÜ ‚üß‚ÇÅ = (Œª { (x , y) ‚Üí (y , x) }) , qinv-is-equiv ((Œª { (x , y) ‚Üí (y , x) }) , refl , refl)
#‚ü¶ assocl‚ãÜ ‚üß‚ÇÅ = (Œª { (x , y , z) ‚Üí ((x , y) , z) }) ,
  qinv-is-equiv ((Œª { ((x , y) , z) ‚Üí x , y , z }) , refl , refl)
#‚ü¶ absorbr ‚üß‚ÇÅ = (Œª { (() , _) }) , qinv-is-equiv ((Œª ()) , (Œª { (() , _) }) , (Œª ()))
#‚ü¶ dist ‚üß‚ÇÅ = (Œª { (i‚ÇÅ x , y) ‚Üí i‚ÇÅ (x , y); (i‚ÇÇ x , y) ‚Üí i‚ÇÇ (x , y) }) ,
  qinv-is-equiv ((Œª { (i‚ÇÅ (x , y)) ‚Üí i‚ÇÅ x , y; (i‚ÇÇ (x , y)) ‚Üí i‚ÇÇ x , y }) ,
    (Œª { x@(i‚ÇÅ _ , _) ‚Üí refl x; x@(i‚ÇÇ _ , _) ‚Üí refl x }) ,
    (Œª { x@(i‚ÇÅ _) ‚Üí refl x; x@(i‚ÇÇ _) ‚Üí refl x }))
{- #‚ü¶ distl ‚üß‚ÇÅ = (Œª { (x , i‚ÇÅ y) ‚Üí i‚ÇÅ (x , y); (x , i‚ÇÇ y) ‚Üí i‚ÇÇ (x , y) }) ,
  qinv-is-equiv ((Œª { (i‚ÇÅ (x , y)) ‚Üí x , i‚ÇÅ y; (i‚ÇÇ (x , y)) ‚Üí x , i‚ÇÇ y }) ,
    (Œª { x@(_ , i‚ÇÅ _) ‚Üí refl x; x@(_ , i‚ÇÇ _) ‚Üí refl x }) ,
    (Œª { x@(i‚ÇÅ _) ‚Üí refl x; x@(i‚ÇÇ _) ‚Üí refl x }))-}
#‚ü¶ _‚ü∑_.! f ‚üß‚ÇÅ = !e #‚ü¶ f ‚üß‚ÇÅ
#‚ü¶ f ‚óé g ‚üß‚ÇÅ = #‚ü¶ g ‚üß‚ÇÅ ‚óè #‚ü¶ f ‚üß‚ÇÅ
#‚ü¶ f ‚äï g ‚üß‚ÇÅ =
  let (f , e) = #‚ü¶ f ‚üß‚ÇÅ in
  let (f‚Åª¬π , Œµf , Œ∑f) = hae-is-qinv e in
  let (g , e) = #‚ü¶ g ‚üß‚ÇÅ in
  let (g‚Åª¬π , Œµg , Œ∑g) = hae-is-qinv e in
  (Œª { (i‚ÇÅ x) ‚Üí i‚ÇÅ (f x); (i‚ÇÇ x) ‚Üí i‚ÇÇ (g x) }) ,
    qinv-is-equiv ((Œª { (i‚ÇÅ y) ‚Üí i‚ÇÅ (f‚Åª¬π y); (i‚ÇÇ y) ‚Üí i‚ÇÇ (g‚Åª¬π y) }) ,
      (Œª { (i‚ÇÅ x) ‚Üí ap i‚ÇÅ (Œµf x); (i‚ÇÇ x) ‚Üí ap i‚ÇÇ (Œµg x) }) ,
      (Œª { (i‚ÇÅ y) ‚Üí ap i‚ÇÅ (Œ∑f y); (i‚ÇÇ y) ‚Üí ap i‚ÇÇ (Œ∑g y) }))
#‚ü¶ f ‚äó g ‚üß‚ÇÅ =
  let (f , e) = #‚ü¶ f ‚üß‚ÇÅ in
  let (f‚Åª¬π , Œµf , Œ∑f) = hae-is-qinv e in
  let (g , e) = #‚ü¶ g ‚üß‚ÇÅ in
  let (g‚Åª¬π , Œµg , Œ∑g) = hae-is-qinv e in
  (Œª { (a , b) ‚Üí (f a , g b) }) ,
    qinv-is-equiv ((Œª { (c , d) ‚Üí (f‚Åª¬π c , g‚Åª¬π d) }) ,
      (Œª { (a , b) ‚Üí pair= (Œµf a , Œµg b) }) ,
      (Œª { (c , d) ‚Üí pair= (Œ∑f c , Œ∑g d) }))

‚ü¶_‚üß‚ÇÄ : U ‚Üí M
‚ü¶ T ‚üß‚ÇÄ = #‚ü¶ T ‚üß‚ÇÄ , size T , ‚à£ ua #‚ü¶ normalizeC T ‚üß‚ÇÅ ‚óæ size-el _ ‚à£

-- Can't induct over the type in the first component, so return
-- the next best thing
‚ü¶_‚üß‚ÇÄ‚Åª¬π : M ‚Üí U
‚ü¶ _ , n , _ ‚üß‚ÇÄ‚Åª¬π = fromSize n

-- This is risky: the only reason we are able to explicitly give
-- normalizeC as a path is because we know that the image of the translation
-- in the model has truncated paths of the form ‚à£ ua #‚ü¶ normalizeC ... ‚üß‚ÇÅ ‚à£
‚ü¶‚ü¶_‚üß‚ÇÄ‚üß‚ÇÄ‚Åª¬π : (T : U) ‚Üí ‚ü¶ ‚ü¶ T ‚üß‚ÇÄ ‚üß‚ÇÄ‚Åª¬π ‚ü∑ T
‚ü¶‚ü¶ T ‚üß‚ÇÄ‚üß‚ÇÄ‚Åª¬π = ! (normalizeC T)

‚ü¶‚ü¶_‚üß‚ÇÄ‚Åª¬π‚üß‚ÇÄ : (X : M) ‚Üí ‚à• ‚ü¶ ‚ü¶ X ‚üß‚ÇÄ‚Åª¬π ‚üß‚ÇÄ == X ‚à•
‚ü¶‚ü¶ X@(T , n , p) ‚üß‚ÇÄ‚Åª¬π‚üß‚ÇÄ = recTrunc _ (‚à£_‚à£ ‚àò lem) identify p where
  lem : T == El n ‚Üí ‚ü¶ ‚ü¶ X ‚üß‚ÇÄ‚Åª¬π ‚üß‚ÇÄ == X
  lem (refl _) = p‚ÇÅ (finite-types-is-univ _ _) (path-to-eqv (size-el n))
    {- Alternative proof:
         p‚ÇÅ (finite-types-is-univ ‚ü¶ ‚ü¶ X ‚üß‚ÇÄ‚Åª¬π ‚üß‚ÇÄ X) (path-to-eqv (size-el n ‚óæ Paths.! p')) -}

-- TODO: Better names
sound‚ÇÄ : (T : U) ‚Üí Œ£ M (Œª X ‚Üí ‚ü¶ X ‚üß‚ÇÄ‚Åª¬π ‚ü∑ T)
sound‚ÇÄ T = ‚ü¶ T ‚üß‚ÇÄ , ‚ü¶‚ü¶ T ‚üß‚ÇÄ‚üß‚ÇÄ‚Åª¬π

-- We know there exists a path, but we cannot distinguish it concretely, since
-- the path between a type in the semiring and its normal form is truncated.
cmpl‚ÇÄ : (X : M) ‚Üí Œ£ U (Œª T ‚Üí ‚à• ‚ü¶ T ‚üß‚ÇÄ == X ‚à•)
cmpl‚ÇÄ X = ‚ü¶ X ‚üß‚ÇÄ‚Åª¬π , ‚ü¶‚ü¶ X ‚üß‚ÇÄ‚Åª¬π‚üß‚ÇÄ
